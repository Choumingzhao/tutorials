
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "intermediate/torch_compile_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_intermediate_torch_compile_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_intermediate_torch_compile_tutorial.py:


torch.compile Tutorial
================
**Author:** William Wen

.. GENERATED FROM PYTHON SOURCE LINES 10-39

``torch.compile`` is the latest method to speed up your PyTorch code!
``torch.compile`` makes PyTorch code run faster by
JIT-compiling PyTorch code into optimized kernels,
all while requiring minimal code changes.

In this tutorial, we cover basic ``torch.compile`` usage,
and demonstrate the advantages of ``torch.compile`` over
previous PyTorch compiler solutions, such as
`TorchScript <https://pytorch.org/docs/stable/jit.html>`__ and 
`FX Tracing <https://pytorch.org/docs/stable/fx.html#torch.fx.symbolic_trace>`__.

**Contents**

- Basic Usage
- Demonstrating Speedups
- Comparison to TorchScript and FX Tracing
- TorchDynamo and FX Graphs
- Conclusion

**Required pip Dependencies**

- ``torch >= 2.0``
- ``torchvision``
- ``numpy``
- ``scipy``
- ``tabulate``

Note: a modern NVIDIA GPU (Volta or Ampere) is recommended for this tutorial.


.. GENERATED FROM PYTHON SOURCE LINES 41-53

Basic Usage
------------

``torch.compile`` is included in the latest PyTorch..
Running TorchInductor on GPU requires Triton, which is included with the PyTorch 2.0 nightly
binary. If Triton is still missing, try installing ``torchtriton`` via pip 
(``pip install torchtriton --extra-index-url "https://download.pytorch.org/whl/nightly/cu117"``
for CUDA 11.7).

Arbitrary Python functions can be optimized by passing the callable to
``torch.compile``. We can then call the returned optimized
function in place of the original function.

.. GENERATED FROM PYTHON SOURCE LINES 53-63

.. code-block:: default


    import torch

    def foo(x, y):
        a = torch.sin(x)
        b = torch.cos(x)
        return a + b
    opt_foo1 = torch.compile(foo)
    print(opt_foo1(torch.randn(10, 10), torch.randn(10, 10)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.4125e+00,  9.1811e-01,  1.3213e+00, -8.6731e-01,  6.7013e-01,
             -3.7786e-01,  7.9450e-01,  1.3670e+00,  1.2166e+00,  1.3954e+00],
            [ 1.4024e+00,  1.2900e+00,  9.0869e-01,  1.2836e+00, -1.1893e+00,
              6.0008e-01, -1.3187e+00,  1.4142e+00,  1.3775e+00,  6.3015e-01],
            [ 1.0820e+00,  1.4142e+00,  1.3161e+00,  9.7335e-01,  1.3447e+00,
              1.4056e+00,  1.1077e+00, -8.4659e-02,  8.8715e-01, -1.1611e+00],
            [ 6.7344e-01,  5.9501e-01,  6.0316e-01,  1.3969e+00, -2.8622e-01,
             -7.8966e-01,  1.3034e+00, -1.3860e+00,  8.2712e-02, -1.8170e-02],
            [-2.3602e-01,  5.2633e-01,  1.0097e+00, -2.5888e-01, -2.2449e-02,
             -1.3006e+00,  1.0333e+00, -8.1673e-02,  1.4115e+00,  8.0235e-01],
            [ 1.1511e+00,  1.1781e+00, -3.6348e-01, -6.3489e-01,  7.0806e-02,
              1.2362e+00,  1.2989e+00,  1.3994e+00,  1.2486e+00, -1.2500e+00],
            [ 7.9131e-01,  1.3473e+00, -2.4216e-01,  6.8113e-01, -7.5586e-01,
              4.3916e-02,  4.7761e-01,  1.4082e+00,  1.1736e+00,  1.0455e+00],
            [ 1.0626e+00,  1.3750e+00,  7.5121e-01,  1.3972e+00, -6.7423e-01,
              1.4060e+00,  7.3945e-01,  6.6714e-01, -1.3675e-02, -1.1116e-04],
            [ 1.2254e-01,  1.9360e-01,  1.2322e+00, -9.0891e-01, -1.3225e+00,
              5.1891e-02,  1.2794e+00,  8.6885e-01,  1.3982e+00,  1.2335e+00],
            [ 1.0372e+00,  1.3351e+00,  6.0878e-01,  1.0879e+00,  2.0086e-01,
              2.8854e-01,  1.4114e+00, -1.3798e+00,  1.4105e+00,  1.1956e+00]])




.. GENERATED FROM PYTHON SOURCE LINES 64-65

Alternatively, we can decorate the function.

.. GENERATED FROM PYTHON SOURCE LINES 65-73

.. code-block:: default


    @torch.compile
    def opt_foo2(x, y):
        a = torch.sin(x)
        b = torch.cos(x)
        return a + b
    print(opt_foo2(torch.randn(10, 10), torch.randn(10, 10)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[-0.4846,  1.3693, -0.0874, -0.1902, -0.0891,  1.4132,  0.6838,  0.6512,
              0.7269,  0.7259],
            [ 0.9519, -0.3760,  0.6108,  0.2755,  1.3202, -0.4450,  1.3726,  1.3754,
             -1.1912,  0.9201],
            [ 1.3199,  1.3111,  0.5857,  1.0849,  0.3281, -0.3584,  1.3275,  0.9157,
             -0.1523,  1.3157],
            [ 0.8685, -1.2271, -0.1392,  1.3941,  0.4340,  0.5593,  1.1005,  0.7539,
              1.2916, -0.8596],
            [ 1.3579,  0.5253,  1.0152,  1.3913, -0.4813,  0.7072,  1.3687,  0.3188,
              0.2258,  0.5809],
            [ 1.0180,  1.4134,  1.3223,  1.1785, -0.9353, -0.4866,  1.0771, -0.1552,
              1.0088,  1.3841],
            [ 1.2691,  0.3981,  0.1807,  1.1224,  0.6165, -1.3923,  0.8072,  0.9508,
              1.3404,  0.5694],
            [ 1.0101,  0.9108,  1.0486,  0.0512, -0.2482, -0.7539,  0.7220,  1.3499,
              1.4058,  1.4142],
            [ 0.7387, -0.6712, -0.7586,  1.2945, -1.3064,  1.4040, -0.8441,  1.4096,
              1.1886,  1.3468],
            [ 1.4085,  1.3508, -0.2067,  1.3254,  1.4003,  1.4095,  1.2326,  1.3819,
              0.5871,  1.3430]])




.. GENERATED FROM PYTHON SOURCE LINES 74-75

We can also optimize ``torch.nn.Module`` instances.

.. GENERATED FROM PYTHON SOURCE LINES 75-88

.. code-block:: default


    class MyModule(torch.nn.Module):
        def __init__(self):
            super().__init__()
            self.lin = torch.nn.Linear(100, 10)

        def forward(self, x):
            return torch.nn.functional.relu(self.lin(x))

    mod = MyModule()
    opt_mod = torch.compile(mod)
    print(opt_mod(torch.randn(10, 100)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[-0.0000, 0.1257, 0.2518, -0.0000, -0.0000, -0.0000, 1.3602, 0.1791, 0.4299,
             -0.0000],
            [0.2182, -0.0000, -0.0000, 0.5806, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
             -0.0000],
            [-0.0000, 0.5224, 0.7669, -0.0000, -0.0000, 0.0667, 0.7045, 1.2431, 0.0094,
             -0.0000],
            [-0.0000, 0.1869, 1.2177, 0.5236, 0.2309, -0.0000, -0.0000, -0.0000, 1.2403,
             -0.0000],
            [-0.0000, 0.6712, -0.0000, 0.4237, 0.5046, 0.7672, 0.0827, 0.5451, 0.1485,
             0.1074],
            [0.2875, 0.1110, -0.0000, 0.0585, 0.2088, -0.0000, 0.7410, -0.0000, -0.0000,
             -0.0000],
            [0.3928, -0.0000, 0.8542, -0.0000, 0.1142, 0.1117, 0.3957, -0.0000, -0.0000,
             0.3899],
            [0.4595, 0.1301, -0.0000, -0.0000, 0.0043, 1.5152, -0.0000, -0.0000, 0.6348,
             -0.0000],
            [-0.0000, -0.0000, -0.0000, 0.8112, 0.0541, -0.0000, 0.9267, -0.0000, 0.1459,
             -0.0000],
            [0.4591, 0.1888, -0.0000, -0.0000, 0.1475, -0.0000, 0.2027, 0.1419, 1.5653,
             1.1354]], grad_fn=<CompiledFunctionBackward>)




.. GENERATED FROM PYTHON SOURCE LINES 89-97

Demonstrating Speedups
-----------------------

Let's now demonstrate that using ``torch.compile`` can speed
up real models. We will compare standard eager mode and 
``torch.compile`` by evaluating and training ResNet-18 on random data.

Before we start, we need to define some utility functions.

.. GENERATED FROM PYTHON SOURCE LINES 97-124

.. code-block:: default


    # Returns the result of running `fn()` and the time it took for `fn()` to run,
    # in seconds. We use CUDA events and synchronization for the most accurate
    # measurements.
    def timed(fn):
        start = torch.cuda.Event(enable_timing=True)
        end = torch.cuda.Event(enable_timing=True)
        start.record()
        result = fn()
        end.record()
        torch.cuda.synchronize()
        return result, start.elapsed_time(end) / 1000

    # Generates random input and targets data for the model, where `b` is
    # batch size.
    def generate_data(b):
        return (
            torch.randn(b, 3, 128, 128).to(torch.float32).cuda(),
            torch.randint(1000, (b,)).cuda(),
        )

    N_ITERS = 10

    from torchvision.models import resnet18
    def init_model():
        return resnet18().to(torch.float32).cuda()








.. GENERATED FROM PYTHON SOURCE LINES 125-129

First, let's compare inference.

Note that in the call to ``torch.compile``, we have have the additional
``mode`` argument, which we will discuss below.

.. GENERATED FROM PYTHON SOURCE LINES 129-145

.. code-block:: default


    def evaluate(mod, inp):
        return mod(inp)

    model = init_model()

    # Reset since we are using a different mode.
    import torch._dynamo
    torch._dynamo.reset()

    evaluate_opt = torch.compile(evaluate, mode="reduce-overhead")

    inp = generate_data(16)[0]
    print("eager:", timed(lambda: evaluate(model, inp))[1])
    print("compile:", timed(lambda: evaluate_opt(model, inp))[1])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    eager: 2.11890576171875
    compile: 10.7196455078125




.. GENERATED FROM PYTHON SOURCE LINES 146-152

Notice that ``torch.compile`` takes a lot longer to complete
compared to eager. This is because ``torch.compile`` compiles
the model into optimized kernels as it executes. In our example, the
structure of the model doesn't change, and so recompilation is not
needed. So if we run our optimized model several more times, we should
see a significant improvement compared to eager.

.. GENERATED FROM PYTHON SOURCE LINES 152-178

.. code-block:: default


    eager_times = []
    compile_times = []
    for i in range(N_ITERS):
        inp = generate_data(16)[0]
        _, eager_time = timed(lambda: evaluate(model, inp))
        eager_times.append(eager_time)
        print(f"eager eval time {i}: {eager_time}")

    print("~" * 10)

    compile_times = []
    for i in range(N_ITERS):
        inp = generate_data(16)[0]
        _, compile_time = timed(lambda: evaluate_opt(model, inp))
        compile_times.append(compile_time)
        print(f"compile eval time {i}: {compile_time}")
    print("~" * 10)

    import numpy as np
    eager_med = np.median(eager_times)
    compile_med = np.median(compile_times)
    speedup = eager_med / compile_med
    print(f"(eval) eager median: {eager_med}, compile median: {compile_med}, speedup: {speedup}x")
    print("~" * 10)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    eager eval time 0: 0.009590271949768067
    eager eval time 1: 0.008964544296264648
    eager eval time 2: 0.00897811222076416
    eager eval time 3: 0.008992768287658692
    eager eval time 4: 0.00897663974761963
    eager eval time 5: 0.008994208335876466
    eager eval time 6: 0.009023648262023926
    eager eval time 7: 0.008487168312072755
    eager eval time 8: 0.008421376228332519
    eager eval time 9: 0.00842124843597412
    ~~~~~~~~~~
    compile eval time 0: 0.008895135879516602
    compile eval time 1: 0.008908831596374511
    compile eval time 2: 0.008874208450317382
    compile eval time 3: 0.00885756778717041
    compile eval time 4: 0.008845312118530273
    compile eval time 5: 0.008876095771789551
    compile eval time 6: 0.008863391876220704
    compile eval time 7: 0.008933343887329102
    compile eval time 8: 0.008877663612365723
    compile eval time 9: 0.008868415832519532
    ~~~~~~~~~~
    (eval) eager median: 0.008977375984191894, compile median: 0.008875152111053466, speedup: 1.0115179854789322x
    ~~~~~~~~~~




.. GENERATED FROM PYTHON SOURCE LINES 179-197

And indeed, we can see that running our model with ``torch.compile``
results in a significant speedup. Speedup mainly comes from reducing Python overhead and
GPU read/writes, and so the observed speedup may vary on factors such as model
architecture and batch size. For example, if a model's architecture is simple
and the amount of data is large, then the bottleneck would be
GPU compute and the observed speedup may be less significant.

You may also see different speedup results depending on the chosen ``mode``
argument. Since our model and data are small, we want to reduce overhead as
much as possible, and so we chose ``"reduce-overhead"``. For your own models,
you may need to experiment with different modes to maximize speedup. You can
read more about modes `here <https://pytorch.org/get-started/pytorch-2.0/#user-experience>`__.

For general PyTorch benchmarking, you can try using ``torch.utils.benchmark`` instead of the ``timed``
function we defined above. We wrote our own timing function in this tutorial to show
``torch.compile``'s compilation latency.

Now, let's consider comparing training.

.. GENERATED FROM PYTHON SOURCE LINES 197-234

.. code-block:: default


    model = init_model()
    opt = torch.optim.Adam(model.parameters())

    def train(mod, data):
        opt.zero_grad(True)
        pred = mod(data[0])
        loss = torch.nn.CrossEntropyLoss()(pred, data[1])
        loss.backward()
        opt.step()

    eager_times = []
    for i in range(N_ITERS):
        inp = generate_data(16)
        _, eager_time = timed(lambda: train(model, inp))
        eager_times.append(eager_time)
        print(f"eager train time {i}: {eager_time}")
    print("~" * 10)

    model = init_model()
    opt = torch.optim.Adam(model.parameters())
    train_opt = torch.compile(train, mode="reduce-overhead")

    compile_times = []
    for i in range(N_ITERS):
        inp = generate_data(16)
        _, compile_time = timed(lambda: train_opt(model, inp))
        compile_times.append(compile_time)
        print(f"compile train time {i}: {compile_time}")
    print("~" * 10)

    eager_med = np.median(eager_times)
    compile_med = np.median(compile_times)
    speedup = eager_med / compile_med
    print(f"(train) eager median: {eager_med}, compile median: {compile_med}, speedup: {speedup}x")
    print("~" * 10)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    eager train time 0: 0.4567718505859375
    eager train time 1: 0.0256058235168457
    eager train time 2: 0.025639551162719727
    eager train time 3: 0.025732160568237305
    eager train time 4: 0.025738496780395508
    eager train time 5: 0.021645503997802733
    eager train time 6: 0.021598207473754884
    eager train time 7: 0.021585920333862304
    eager train time 8: 0.021548255920410157
    eager train time 9: 0.021929983139038087
    ~~~~~~~~~~
    compile train time 0: 23.536169921875
    compile train time 1: 0.021968896865844727
    compile train time 2: 0.021039199829101563
    compile train time 3: 0.021062400817871092
    compile train time 4: 0.020969472885131835
    compile train time 5: 0.02103120040893555
    compile train time 6: 0.021074432373046875
    compile train time 7: 0.021159616470336914
    compile train time 8: 0.021073280334472658
    compile train time 9: 0.021040800094604493
    ~~~~~~~~~~
    (train) eager median: 0.023767903327941896, compile median: 0.021067840576171875, speedup: 1.1281603941328398x
    ~~~~~~~~~~




.. GENERATED FROM PYTHON SOURCE LINES 235-238

Again, we can see that ``torch.compile`` takes longer in the first
iteration, as it must compile the model, but in subsequent iterations, we see
significant speedups compared to eager.

.. GENERATED FROM PYTHON SOURCE LINES 240-252

Comparison to TorchScript and FX Tracing
-----------------------------------------

We have seen that ``torch.compile`` can speed up PyTorch code.
Why else should we use ``torch.compile`` over existing PyTorch
compiler solutions, such as TorchScript or FX Tracing? Primarily, the
advantage of ``torch.compile`` lies in its ability to handle
arbitrary Python code with minimal changes to existing code.

One case that ``torch.compile`` can handle that other compiler
solutions struggle with is data-dependent control flow (the 
``if x.sum() < 0:`` line below).

.. GENERATED FROM PYTHON SOURCE LINES 252-269

.. code-block:: default


    def f1(x, y):
        if x.sum() < 0:
            return -y
        return y

    # Test that `fn1` and `fn2` return the same result, given
    # the same arguments `args`. Typically, `fn1` will be an eager function
    # while `fn2` will be a compiled function (torch.compile, TorchScript, or FX graph).
    def test_fns(fn1, fn2, args):
        out1 = fn1(*args)
        out2 = fn2(*args)
        return torch.allclose(out1, out2)

    inp1 = torch.randn(5, 5)
    inp2 = torch.randn(5, 5)








.. GENERATED FROM PYTHON SOURCE LINES 270-273

TorchScript tracing ``f1`` results in
silently incorrect results, since only the actual control flow path
is traced.

.. GENERATED FROM PYTHON SOURCE LINES 273-278

.. code-block:: default


    traced_f1 = torch.jit.trace(f1, (inp1, inp2))
    print("traced 1, 1:", test_fns(f1, traced_f1, (inp1, inp2)))
    print("traced 1, 2:", test_fns(f1, traced_f1, (-inp1, inp2)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py:254: TracerWarning:

    Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!

    traced 1, 1: True
    traced 1, 2: False




.. GENERATED FROM PYTHON SOURCE LINES 279-281

FX tracing ``f1`` results in an error due to the presence of
data-dependent control flow.

.. GENERATED FROM PYTHON SOURCE LINES 281-288

.. code-block:: default


    import traceback as tb
    try:
        torch.fx.symbolic_trace(f1)
    except:
        tb.print_exc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 284, in <module>
        torch.fx.symbolic_trace(f1)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py", line 1109, in symbolic_trace
        graph = tracer.trace(root, concrete_args)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 209, in _fn
        return fn(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py", line 778, in trace
        (self.create_arg(fn(*args)),),
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 254, in f1
        if x.sum() < 0:
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/proxy.py", line 413, in __bool__
        return self.tracer.to_bool(self)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/proxy.py", line 276, in to_bool
        raise TraceError('symbolically traced variables cannot be used as inputs to control flow')
    torch.fx.proxy.TraceError: symbolically traced variables cannot be used as inputs to control flow




.. GENERATED FROM PYTHON SOURCE LINES 289-292

If we provide a value for ``x`` as we try to FX trace ``f1``, then
we run into the same problem as TorchScript tracing, as the data-dependent
control flow is removed in the traced function.

.. GENERATED FROM PYTHON SOURCE LINES 292-297

.. code-block:: default


    fx_f1 = torch.fx.symbolic_trace(f1, concrete_args={"x": inp1})
    print("fx 1, 1:", test_fns(f1, fx_f1, (inp1, inp2)))
    print("fx 1, 2:", test_fns(f1, fx_f1, (-inp1, inp2)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py:602: UserWarning:

    Was not able to add assertion to guarantee correct input x to specialized function. It is up to the user to make sure that your inputs match the inputs you specialized the function with.

    fx 1, 1: True
    fx 1, 2: False




.. GENERATED FROM PYTHON SOURCE LINES 298-300

Now we can see that ``torch.compile`` correctly handles
data-dependent control flow.

.. GENERATED FROM PYTHON SOURCE LINES 300-309

.. code-block:: default


    # Reset since we are using a different mode.
    torch._dynamo.reset()

    compile_f1 = torch.compile(f1)
    print("compile 1, 1:", test_fns(f1, compile_f1, (inp1, inp2)))
    print("compile 1, 2:", test_fns(f1, compile_f1, (-inp1, inp2)))
    print("~" * 10)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compile 1, 1: True
    compile 1, 2: True
    ~~~~~~~~~~




.. GENERATED FROM PYTHON SOURCE LINES 310-318

TorchScript scripting can handle data-dependent control flow, but this
solution comes with its own set of problems. Namely, TorchScript scripting
can require major code changes and will raise errors when unsupported Python
is used.

In the example below, we forget TorchScript type annotations and we receive
a TorchScript error because the input type for argument ``y``, an ``int``,
does not match with the default argument type, ``torch.Tensor``.

.. GENERATED FROM PYTHON SOURCE LINES 318-331

.. code-block:: default


    def f2(x, y):
        return x + y

    inp1 = torch.randn(5, 5)
    inp2 = 3

    script_f2 = torch.jit.script(f2)
    try:
        script_f2(inp1, inp2)
    except:
        tb.print_exc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 327, in <module>
        script_f2(inp1, inp2)
    RuntimeError: f2() Expected a value of type 'Tensor (inferred)' for argument 'y' but instead found type 'int'.
    Inferred 'y' to be of type 'Tensor' because it was not annotated with an explicit type.
    Position: 1
    Value: 3
    Declaration: f2(Tensor x, Tensor y) -> Tensor
    Cast error details: Unable to cast 3 to Tensor




.. GENERATED FROM PYTHON SOURCE LINES 332-333

However, ``torch.compile`` is easily able to handle ``f2``.

.. GENERATED FROM PYTHON SOURCE LINES 333-338

.. code-block:: default


    compile_f2 = torch.compile(f2)
    print("compile 2:", test_fns(f2, compile_f2, (inp1, inp2)))
    print("~" * 10)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compile 2: True
    ~~~~~~~~~~




.. GENERATED FROM PYTHON SOURCE LINES 339-341

Another case that ``torch.compile`` handles well compared to
previous compilers solutions is the usage of non-PyTorch functions.

.. GENERATED FROM PYTHON SOURCE LINES 341-350

.. code-block:: default


    import scipy
    def f3(x):
        x = x * 2
        x = scipy.fft.dct(x.numpy())
        x = torch.from_numpy(x)
        x = x * 2
        return x








.. GENERATED FROM PYTHON SOURCE LINES 351-353

TorchScript tracing treats results from non-PyTorch function calls
as constants, and so our results can be silently wrong.

.. GENERATED FROM PYTHON SOURCE LINES 353-359

.. code-block:: default


    inp1 = torch.randn(5, 5)
    inp2 = torch.randn(5, 5)
    traced_f3 = torch.jit.trace(f3, (inp1,))
    print("traced 3:", test_fns(f3, traced_f3, (inp2,)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py:345: TracerWarning:

    Converting a tensor to a NumPy array might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!

    /var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py:346: TracerWarning:

    torch.from_numpy results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.

    traced 3: False




.. GENERATED FROM PYTHON SOURCE LINES 360-361

TorchScript scripting and FX tracing disallow non-PyTorch function calls.

.. GENERATED FROM PYTHON SOURCE LINES 361-372

.. code-block:: default


    try:
        torch.jit.script(f3)
    except:
        tb.print_exc()

    try:
        torch.fx.symbolic_trace(f3)
    except:
        tb.print_exc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 363, in <module>
        torch.jit.script(f3)
      File "/opt/conda/lib/python3.10/site-packages/torch/jit/_script.py", line 1341, in script
        fn = torch._C._jit_script_compile(
      File "/opt/conda/lib/python3.10/site-packages/torch/_jit_internal.py", line 1198, in _try_get_dispatched_fn
        return boolean_dispatched.get(fn)
      File "/opt/conda/lib/python3.10/weakref.py", line 453, in get
        return self.data.get(ref(key),default)
    TypeError: cannot create weak reference to 'uarray._Function' object
    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 368, in <module>
        torch.fx.symbolic_trace(f3)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py", line 1109, in symbolic_trace
        graph = tracer.trace(root, concrete_args)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 209, in _fn
        return fn(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py", line 778, in trace
        (self.create_arg(fn(*args)),),
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 345, in f3
        x = scipy.fft.dct(x.numpy())
      File "/opt/conda/lib/python3.10/site-packages/scipy/fft/_backend.py", line 25, in __ua_function__
        return fn(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/scipy/fft/_pocketfft/realtransforms.py", line 19, in _r2r
        tmp = _asfarray(x)
      File "/opt/conda/lib/python3.10/site-packages/scipy/fft/_pocketfft/helper.py", line 89, in _asfarray
        if x.dtype == np.float16:
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/proxy.py", line 518, in impl
        return tracer.create_proxy('call_function', target, args, kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/proxy.py", line 151, in create_proxy
        args_ = self.create_arg(args)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py", line 373, in create_arg
        return super().create_arg(a)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/proxy.py", line 239, in create_arg
        return type(a)(self.create_arg(elem) for elem in a)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/proxy.py", line 239, in <genexpr>
        return type(a)(self.create_arg(elem) for elem in a)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/_symbolic_trace.py", line 373, in create_arg
        return super().create_arg(a)
      File "/opt/conda/lib/python3.10/site-packages/torch/fx/proxy.py", line 267, in create_arg
        raise NotImplementedError(f"argument of type: {type(a)}")
    NotImplementedError: argument of type: <class 'type'>




.. GENERATED FROM PYTHON SOURCE LINES 373-375

In comparison, ``torch.compile`` is easily able to handle
the non-PyTorch function call.

.. GENERATED FROM PYTHON SOURCE LINES 375-379

.. code-block:: default


    compile_f3 = torch.compile(f3)
    print("compile 3:", test_fns(f3, compile_f3, (inp2,)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compile 3: True




.. GENERATED FROM PYTHON SOURCE LINES 380-394

TorchDynamo and FX Graphs
--------------------------

One important component of ``torch.compile`` is TorchDynamo.
TorchDynamo is responsible for JIT compiling arbitrary Python code into
`FX graphs <https://pytorch.org/docs/stable/fx.html#torch.fx.Graph>`__, which can
then be further optimized. TorchDynamo extracts FX graphs by analyzing Python bytecode
during runtime and detecting calls to PyTorch operations.

Normally, TorchInductor, another component of ``torch.compile``,
further compiles the FX graphs into optimized kernels,
but TorchDynamo allows for different backends to be used. In order to inspect
the FX graphs that TorchDynamo outputs, let us create a custom backend that
outputs the FX graph and simply returns the graph's unoptimized forward method.

.. GENERATED FROM PYTHON SOURCE LINES 394-407

.. code-block:: default


    from typing import List
    def custom_backend(gm: torch.fx.GraphModule, example_inputs: List[torch.Tensor]):
        print("custom backend called with FX graph:")
        gm.graph.print_tabular()
        return gm.forward

    # Reset since we are using a different backend.
    torch._dynamo.reset()

    opt_model = torch.compile(init_model(), backend=custom_backend)
    opt_model(generate_data(16)[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    custom backend called with FX graph:
    opcode         name                        target                                                      args                                             kwargs
    -------------  --------------------------  ----------------------------------------------------------  -----------------------------------------------  --------
    placeholder    x                           x                                                           ()                                               {}
    call_module    self_conv1                  self_conv1                                                  (x,)                                             {}
    call_module    self_bn1                    self_bn1                                                    (self_conv1,)                                    {}
    call_module    self_relu                   self_relu                                                   (self_bn1,)                                      {}
    call_module    self_maxpool                self_maxpool                                                (self_relu,)                                     {}
    call_module    self_layer1_0_conv1         self_layer1_0_conv1                                         (self_maxpool,)                                  {}
    call_module    self_layer1_0_bn1           self_layer1_0_bn1                                           (self_layer1_0_conv1,)                           {}
    call_module    self_layer1_0_relu          self_layer1_0_relu                                          (self_layer1_0_bn1,)                             {}
    call_module    self_layer1_0_conv2         self_layer1_0_conv2                                         (self_layer1_0_relu,)                            {}
    call_module    self_layer1_0_bn2           self_layer1_0_bn2                                           (self_layer1_0_conv2,)                           {}
    call_function  iadd                        <built-in function iadd>                                    (self_layer1_0_bn2, self_maxpool)                {}
    call_module    self_layer1_0_relu_1        self_layer1_0_relu                                          (iadd,)                                          {}
    call_module    self_layer1_1_conv1         self_layer1_1_conv1                                         (self_layer1_0_relu_1,)                          {}
    call_module    self_layer1_1_bn1           self_layer1_1_bn1                                           (self_layer1_1_conv1,)                           {}
    call_module    self_layer1_1_relu          self_layer1_1_relu                                          (self_layer1_1_bn1,)                             {}
    call_module    self_layer1_1_conv2         self_layer1_1_conv2                                         (self_layer1_1_relu,)                            {}
    call_module    self_layer1_1_bn2           self_layer1_1_bn2                                           (self_layer1_1_conv2,)                           {}
    call_function  iadd_1                      <built-in function iadd>                                    (self_layer1_1_bn2, self_layer1_0_relu_1)        {}
    call_module    self_layer1_1_relu_1        self_layer1_1_relu                                          (iadd_1,)                                        {}
    call_module    self_layer2_0_conv1         self_layer2_0_conv1                                         (self_layer1_1_relu_1,)                          {}
    call_module    self_layer2_0_bn1           self_layer2_0_bn1                                           (self_layer2_0_conv1,)                           {}
    call_module    self_layer2_0_relu          self_layer2_0_relu                                          (self_layer2_0_bn1,)                             {}
    call_module    self_layer2_0_conv2         self_layer2_0_conv2                                         (self_layer2_0_relu,)                            {}
    call_module    self_layer2_0_bn2           self_layer2_0_bn2                                           (self_layer2_0_conv2,)                           {}
    call_module    self_layer2_0_downsample_0  self_layer2_0_downsample_0                                  (self_layer1_1_relu_1,)                          {}
    call_module    self_layer2_0_downsample_1  self_layer2_0_downsample_1                                  (self_layer2_0_downsample_0,)                    {}
    call_function  iadd_2                      <built-in function iadd>                                    (self_layer2_0_bn2, self_layer2_0_downsample_1)  {}
    call_module    self_layer2_0_relu_1        self_layer2_0_relu                                          (iadd_2,)                                        {}
    call_module    self_layer2_1_conv1         self_layer2_1_conv1                                         (self_layer2_0_relu_1,)                          {}
    call_module    self_layer2_1_bn1           self_layer2_1_bn1                                           (self_layer2_1_conv1,)                           {}
    call_module    self_layer2_1_relu          self_layer2_1_relu                                          (self_layer2_1_bn1,)                             {}
    call_module    self_layer2_1_conv2         self_layer2_1_conv2                                         (self_layer2_1_relu,)                            {}
    call_module    self_layer2_1_bn2           self_layer2_1_bn2                                           (self_layer2_1_conv2,)                           {}
    call_function  iadd_3                      <built-in function iadd>                                    (self_layer2_1_bn2, self_layer2_0_relu_1)        {}
    call_module    self_layer2_1_relu_1        self_layer2_1_relu                                          (iadd_3,)                                        {}
    call_module    self_layer3_0_conv1         self_layer3_0_conv1                                         (self_layer2_1_relu_1,)                          {}
    call_module    self_layer3_0_bn1           self_layer3_0_bn1                                           (self_layer3_0_conv1,)                           {}
    call_module    self_layer3_0_relu          self_layer3_0_relu                                          (self_layer3_0_bn1,)                             {}
    call_module    self_layer3_0_conv2         self_layer3_0_conv2                                         (self_layer3_0_relu,)                            {}
    call_module    self_layer3_0_bn2           self_layer3_0_bn2                                           (self_layer3_0_conv2,)                           {}
    call_module    self_layer3_0_downsample_0  self_layer3_0_downsample_0                                  (self_layer2_1_relu_1,)                          {}
    call_module    self_layer3_0_downsample_1  self_layer3_0_downsample_1                                  (self_layer3_0_downsample_0,)                    {}
    call_function  iadd_4                      <built-in function iadd>                                    (self_layer3_0_bn2, self_layer3_0_downsample_1)  {}
    call_module    self_layer3_0_relu_1        self_layer3_0_relu                                          (iadd_4,)                                        {}
    call_module    self_layer3_1_conv1         self_layer3_1_conv1                                         (self_layer3_0_relu_1,)                          {}
    call_module    self_layer3_1_bn1           self_layer3_1_bn1                                           (self_layer3_1_conv1,)                           {}
    call_module    self_layer3_1_relu          self_layer3_1_relu                                          (self_layer3_1_bn1,)                             {}
    call_module    self_layer3_1_conv2         self_layer3_1_conv2                                         (self_layer3_1_relu,)                            {}
    call_module    self_layer3_1_bn2           self_layer3_1_bn2                                           (self_layer3_1_conv2,)                           {}
    call_function  iadd_5                      <built-in function iadd>                                    (self_layer3_1_bn2, self_layer3_0_relu_1)        {}
    call_module    self_layer3_1_relu_1        self_layer3_1_relu                                          (iadd_5,)                                        {}
    call_module    self_layer4_0_conv1         self_layer4_0_conv1                                         (self_layer3_1_relu_1,)                          {}
    call_module    self_layer4_0_bn1           self_layer4_0_bn1                                           (self_layer4_0_conv1,)                           {}
    call_module    self_layer4_0_relu          self_layer4_0_relu                                          (self_layer4_0_bn1,)                             {}
    call_module    self_layer4_0_conv2         self_layer4_0_conv2                                         (self_layer4_0_relu,)                            {}
    call_module    self_layer4_0_bn2           self_layer4_0_bn2                                           (self_layer4_0_conv2,)                           {}
    call_module    self_layer4_0_downsample_0  self_layer4_0_downsample_0                                  (self_layer3_1_relu_1,)                          {}
    call_module    self_layer4_0_downsample_1  self_layer4_0_downsample_1                                  (self_layer4_0_downsample_0,)                    {}
    call_function  iadd_6                      <built-in function iadd>                                    (self_layer4_0_bn2, self_layer4_0_downsample_1)  {}
    call_module    self_layer4_0_relu_1        self_layer4_0_relu                                          (iadd_6,)                                        {}
    call_module    self_layer4_1_conv1         self_layer4_1_conv1                                         (self_layer4_0_relu_1,)                          {}
    call_module    self_layer4_1_bn1           self_layer4_1_bn1                                           (self_layer4_1_conv1,)                           {}
    call_module    self_layer4_1_relu          self_layer4_1_relu                                          (self_layer4_1_bn1,)                             {}
    call_module    self_layer4_1_conv2         self_layer4_1_conv2                                         (self_layer4_1_relu,)                            {}
    call_module    self_layer4_1_bn2           self_layer4_1_bn2                                           (self_layer4_1_conv2,)                           {}
    call_function  iadd_7                      <built-in function iadd>                                    (self_layer4_1_bn2, self_layer4_0_relu_1)        {}
    call_module    self_layer4_1_relu_1        self_layer4_1_relu                                          (iadd_7,)                                        {}
    call_module    self_avgpool                self_avgpool                                                (self_layer4_1_relu_1,)                          {}
    call_function  flatten                     <built-in method flatten of type object at 0x7f9f572cd540>  (self_avgpool, 1)                                {}
    call_module    self_fc                     self_fc                                                     (flatten,)                                       {}
    output         output                      output                                                      ((self_fc,),)                                    {}

    tensor([[ 0.4326, -0.6328, -0.5319,  ..., -0.2804,  0.1133, -0.0406],
            [ 0.2618, -0.5868, -0.1108,  ..., -0.4795,  0.3276,  0.0808],
            [ 0.4356, -0.5147, -0.2762,  ..., -0.3087,  0.0120,  0.0603],
            ...,
            [ 0.5005, -0.5882, -0.2364,  ..., -0.5422,  0.0854, -0.0168],
            [ 0.5335, -0.5655, -0.4496,  ..., -0.4090,  0.0953,  0.2068],
            [ 0.5939, -0.5416, -0.3723,  ..., -0.1642,  0.1212,  0.1722]],
           device='cuda:0', grad_fn=<AddmmBackward0>)



.. GENERATED FROM PYTHON SOURCE LINES 408-411

Using our custom backend, we can now see how TorchDynamo is able to handle
data-dependent control flow. Consider the function below, where the line
``if b.sum() < 0`` is the source of data-dependent control flow.

.. GENERATED FROM PYTHON SOURCE LINES 411-424

.. code-block:: default


    def bar(a, b):
        x = a / (torch.abs(a) + 1)
        if b.sum() < 0:
            b = b * -1
        return x * b

    opt_bar = torch.compile(bar, backend=custom_backend)
    inp1 = torch.randn(10)
    inp2 = torch.randn(10)
    opt_bar(inp1, inp2)
    opt_bar(inp1, -inp2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    custom backend called with FX graph:
    opcode         name     target                                                  args              kwargs
    -------------  -------  ------------------------------------------------------  ----------------  --------
    placeholder    a        a                                                       ()                {}
    placeholder    b        b                                                       ()                {}
    call_function  abs_1    <built-in method abs of type object at 0x7f9f572cd540>  (a,)              {}
    call_function  add      <built-in function add>                                 (abs_1, 1)        {}
    call_function  truediv  <built-in function truediv>                             (a, add)          {}
    call_method    sum_1    sum                                                     (b,)              {}
    call_function  lt       <built-in function lt>                                  (sum_1, 0)        {}
    output         output   output                                                  ((truediv, lt),)  {}
    custom backend called with FX graph:
    opcode         name    target                   args         kwargs
    -------------  ------  -----------------------  -----------  --------
    placeholder    b       b                        ()           {}
    placeholder    x       x                        ()           {}
    call_function  mul     <built-in function mul>  (b, -1)      {}
    call_function  mul_1   <built-in function mul>  (x, mul)     {}
    output         output  output                   ((mul_1,),)  {}
    custom backend called with FX graph:
    opcode         name    target                   args       kwargs
    -------------  ------  -----------------------  ---------  --------
    placeholder    b       b                        ()         {}
    placeholder    x       x                        ()         {}
    call_function  mul     <built-in function mul>  (x, b)     {}
    output         output  output                   ((mul,),)  {}

    tensor([ 0.5749,  0.6200,  0.0616,  0.1739,  0.4787,  1.1151,  0.0516,  0.3864,
            -0.1073,  0.1394])



.. GENERATED FROM PYTHON SOURCE LINES 425-449

The output reveals that TorchDynamo extracted 3 different FX graphs
corresponding the following code (order may differ from the output above):

1. ``x = a / (torch.abs(a) + 1)``
2. ``b = b * -1; return x * b``
3. ``return x * b``

When TorchDynamo encounters unsupported Python features, such as data-dependent
control flow, it breaks the computation graph, lets the default Python
interpreter handle the unsupported code, then resumes capturing the graph.

Let's investigate by example how TorchDynamo would step through ``bar``.
If ``b.sum() < 0``, then TorchDynamo would run graph 1, let
Python determine the result of the conditional, then run
graph 2. On the other hand, if ``not b.sum() < 0``, then TorchDynamo
would run graph 1, let Python determine the result of the conditional, then
run graph 3.

This highlights a major difference between TorchDynamo and previous PyTorch
compiler solutions. When encountering unsupported Python features,
previous solutions either raise an error or silently fail.
TorchDynamo, on the other hand, will break the computation graph.

We can see where TorchDynamo breaks the graph by using ``torch._dynamo.explain``:

.. GENERATED FROM PYTHON SOURCE LINES 449-457

.. code-block:: default


    # Reset since we are using a different backend.
    torch._dynamo.reset()
    explanation, out_guards, graphs, ops_per_graph, break_reasons, explanation_verbose = torch._dynamo.explain(
        bar, torch.randn(10), torch.randn(10)
    )
    print(explanation_verbose)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dynamo produced 2 graphs with 1 graph break and 5 ops
     Break reasons: 

    1. generic_jump TensorVariable()
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 414, in bar
        if b.sum() < 0:
 
    2. return_value
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 416, in <graph break in bar>
        return x * b
 
    TorchDynamo compilation metrics:
    Function                        Runtimes (s)
    ------------------------------  --------------
    _compile                        0.0132, 0.0045
    OutputGraph.call_user_compiler  0.0001, 0.0000




.. GENERATED FROM PYTHON SOURCE LINES 458-461

In order to maximize speedup, graph breaks should be limited.
We can force TorchDynamo to raise an error upon the first graph
break encountered by using ``fullgraph=True``:

.. GENERATED FROM PYTHON SOURCE LINES 461-468

.. code-block:: default


    opt_bar = torch.compile(bar, fullgraph=True)
    try:
        opt_bar(torch.randn(10), torch.randn(10))
    except:
        tb.print_exc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 464, in <module>
        opt_bar(torch.randn(10), torch.randn(10))
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 209, in _fn
        return fn(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 337, in catch_errors
        return callback(frame, cache_size, hooks)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py", line 104, in _fn
        return fn(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py", line 262, in _convert_frame_assert
        return _compile(
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/utils.py", line 163, in time_wrapper
        r = func(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py", line 324, in _compile
        out_code = transform_code_object(code, transform)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/bytecode_transformation.py", line 445, in transform_code_object
        transformations(instructions, code_options)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py", line 311, in transform
        tracer.run()
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py", line 1726, in run
        super().run()
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py", line 576, in run
        and self.step()
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py", line 540, in step
        getattr(self, inst.opname)(inst)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py", line 327, in inner
        unimplemented(f"generic_jump {typestr(value)}")
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/exc.py", line 71, in unimplemented
        raise Unsupported(msg)
    torch._dynamo.exc.Unsupported: generic_jump TensorVariable()

    from user code:
       File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 414, in bar
        if b.sum() < 0:

    Set torch._dynamo.config.verbose=True for more information


    You can suppress this exception and fall back to eager by setting:
        torch._dynamo.config.suppress_errors = True





.. GENERATED FROM PYTHON SOURCE LINES 469-471

And below, we demonstrate that TorchDynamo does not break the graph on
the model we used above for demonstrating speedups.

.. GENERATED FROM PYTHON SOURCE LINES 471-475

.. code-block:: default


    opt_model = torch.compile(init_model(), fullgraph=True)
    print(opt_model(generate_data(16)[0]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.8430,  1.1318,  0.6794,  ...,  0.5192, -0.1603, -0.2255],
            [ 0.9280,  1.0776,  0.2471,  ...,  0.6911, -0.1442, -0.0831],
            [ 0.7073,  0.9838,  0.4486,  ...,  0.6304, -0.1727,  0.0389],
            ...,
            [ 0.9598,  1.0769,  0.7115,  ...,  0.9618, -0.3664, -0.0760],
            [ 0.7140,  1.0876,  0.5335,  ...,  0.8446, -0.2787, -0.0525],
            [ 0.6752,  1.0125,  0.3108,  ...,  0.7309, -0.2837, -0.0676]],
           device='cuda:0', grad_fn=<CompiledFunctionBackward>)




.. GENERATED FROM PYTHON SOURCE LINES 476-479

Finally, if we simply want TorchDynamo to output the FX graph for export,
we can use ``torch._dynamo.export``. Note that ``torch._dynamo.export``, like
``fullgraph=True``, raises an error if TorchDynamo breaks the graph.

.. GENERATED FROM PYTHON SOURCE LINES 479-488

.. code-block:: default


    try:
        torch._dynamo.export(bar, torch.randn(10), torch.randn(10))
    except:
        tb.print_exc()

    model_exp = torch._dynamo.export(init_model(), generate_data(16)[0])
    print(model_exp[0](generate_data(16)[0]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 481, in <module>
        torch._dynamo.export(bar, torch.randn(10), torch.randn(10))
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 601, in export
        result_traced = opt_f(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 209, in _fn
        return fn(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py", line 337, in catch_errors
        return callback(frame, cache_size, hooks)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py", line 104, in _fn
        return fn(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py", line 262, in _convert_frame_assert
        return _compile(
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/utils.py", line 163, in time_wrapper
        r = func(*args, **kwargs)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py", line 324, in _compile
        out_code = transform_code_object(code, transform)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/bytecode_transformation.py", line 445, in transform_code_object
        transformations(instructions, code_options)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/convert_frame.py", line 311, in transform
        tracer.run()
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py", line 1726, in run
        super().run()
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py", line 576, in run
        and self.step()
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py", line 540, in step
        getattr(self, inst.opname)(inst)
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/symbolic_convert.py", line 327, in inner
        unimplemented(f"generic_jump {typestr(value)}")
      File "/opt/conda/lib/python3.10/site-packages/torch/_dynamo/exc.py", line 71, in unimplemented
        raise Unsupported(msg)
    torch._dynamo.exc.Unsupported: generic_jump TensorVariable()

    from user code:
       File "/var/lib/jenkins/workspace/intermediate_source/torch_compile_tutorial.py", line 414, in bar
        if b.sum() < 0:

    Set torch._dynamo.config.verbose=True for more information


    You can suppress this exception and fall back to eager by setting:
        torch._dynamo.config.suppress_errors = True

    tensor([[ 0.3382,  0.4805, -0.6096,  ..., -0.1399, -1.2718,  0.4016],
            [ 0.4461,  0.4895, -0.6085,  ..., -0.0232, -1.0919,  0.4051],
            [ 0.3646,  0.2149, -0.6656,  ..., -0.0973, -1.0552,  0.2718],
            ...,
            [ 0.5744,  0.4460, -0.7187,  ..., -0.3175, -0.9439,  0.5150],
            [ 0.4396,  0.3538, -0.6794,  ..., -0.0465, -1.3489,  0.6475],
            [ 0.4549,  0.5467, -0.7980,  ..., -0.0701, -1.1720,  0.5538]],
           device='cuda:0', grad_fn=<AddmmBackward0>)




.. GENERATED FROM PYTHON SOURCE LINES 489-496

Conclusion
------------

In this tutorial, we introduced ``torch.compile`` by covering
basic usage, demonstrating speedups over eager mode, comparing to previous
PyTorch compiler solutions, and briefly investigating TorchDynamo and its interactions
with FX graphs. We hope that you will give ``torch.compile`` a try!


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  5.362 seconds)


.. _sphx_glr_download_intermediate_torch_compile_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torch_compile_tutorial.py <torch_compile_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torch_compile_tutorial.ipynb <torch_compile_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

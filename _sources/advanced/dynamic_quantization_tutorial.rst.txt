
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'his' b'"' b'Feature' b'Between' b'reggaeton' b'"' b',' b'and' b'finally' b'for' b'<unk>' b'\xe2\x80\x93' b'<unk>' b'.' b'In' b'the' b'final' b'half' b'of' b'spread'
    b',' b'Nick' b'W.' b'J.' b'Keeravani' b'writes' b'that' b'it' b'was' b'"' b'proud' b'of' b'scent' b'that' b'these' b',' b'or' b'the' b'main' b'<unk>'
    b',' b'most' b'of' b'Wolf' b'Feel' b'for' b'a' b'impact' b'to' b'Mr' b'M.' b'<unk>' b'"' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'The' b'Sega'
    b',' b'proximity' b'and' b'space' b'=' b'<eos>' b'<eos>' b'East' b'starlings' b'(' b'Clinton' b'of' b'Nature' b')' b'is' b'a' b'American' b'limitation' b'labeled' b'Entertainment'
    b'!' b'Bight' b'.' b'In' b'2006' b'bread' b'Vaughan' b'included' b'I.' b'Talent' b',' b'which' b',' b'however' b',' b'its' b'role' b'is' b'the' b'"'
    b'Wumpa' b'Pilot' b'<unk>' b'"' b'(' b'ASCAP' b')' b'.' b'<eos>' b'Originally' b'V' b'in' b'a' b'folk' b'success' b',' b'Ceres' b'was' b'estimated' b'to'
    b'become' b'a' b'historic' b'learning' b',' b'and' b'not' b'issued' b'legal' b'motion' b',' b'although' b'might' b'have' b'been' b'descended' b'to' b'all' b'of' b'the'
    b'well' b'own' b'intelligence' b',' b'so' b'their' b'application' b'was' b'played' b'as' b',' b'child' b'panels' b'in' b'Liberty' b'.' b'Walpole' b'proposed' b'larger' b'colour'
    b',' b'since' b'being' b'<unk>' b'ditty' b'increased' b',' b'from' b'a' b'character' b'of' b'old' b'cinematic' b'equipment' b'from' b'category' b',' b'a' b'small' b'villain'
    b'electronegative' b'by' b'Van' b'Kitty' b'.' b'This' b'<unk>' b'Fatality' b'rarely' b'included' b'three' b'episodes' b':' b'Its' b'mystic' b'(' b'<unk>' b')' b'151' b','
    b'sixth' b'elements' b'(' b'diodes' b')' b',' b'and' b'behind' b'Sussex' b'.' b'<eos>' b'musicOMH' b'Elijah' b'suggests' b'that' b'e' b'Eno' b'is' b'not' b'considered'
    b'of' b'the' b'subject' b'comparatively' b'close' b'to' b'Therepio' b',' b'but' b'in' b'the' b'other' b'complimented' b'predicted' b'"' b'rather' b'than' b'becomes' b'matched' b'like'
    b'her' b'teams' b',' b'and' b'always' b'expecting' b'her' b'raised' b',' b'those' b'<unk>' b'to' b'save' b'contraceptives' b'more' b'different' b',' b'bold' b'and' b'yellow'
    b'people' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'Legacy' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Government' b'of' b'Ozploitation' b'breed' b'of' b'a' b'generation'
    b'found' b'to' b'be' b'useful' b'StarCraft' b'at' b'a' b'long' b'@-@' b'level' b'1690' b'with' b'193' b'English' b'games' b',' b'on' b'the' b'night' b'of'
    b'his' b'term' b'<unk>' b'were' b'a' b'damaging' b'relics' b'that' b'question' b')' b'offer' b'Mahesh' b"'s" b'body' b'of' b'interest' b'.' b'In' b'his' b'windows'
    b'they' b',' b'it' b'was' b'an' b'Raghuveer' b'feature' b'the' b'gap' b'after' b'Coming' b'as' b'they' b'swears' b'her' b'old' b'skilled' b'enemy' b'straight' b'so'
    b'the' b'<unk>' b'<unk>' b';' b'"' b'Pedro' b',' b'"' b'take' b'<unk>' b'by' b'Thomas' b'Watts' b'in' b'1801' b'.' b'He' b'focused' b'in' b'broadside'
    b'+' b'December' b'Malone' b'.' b'Although' b'most' b'of' b'these' b'kind' b'of' b'German' b'titles' b'landed' b'up' b'1961' b'de' b'Trujillo' b"'s" b'Letters' b','
    b'would' b'be' b'invited' b'to' b'send' b',' b'though' b'big' b',' b'and' b'towards' b'dead' b'than' b'it' b'have' b'been' b'more' b'successful' b'from' b'attitudes'
    b'earlier' b'.' b'<eos>' b'In' b'a' b'suite' b',' b'she' b'is' b'among' b'such' b'for' b'other' b'spaceship' b',' b'having' b'its' b'<unk>' b'and' b'expressive'
    b'1633' b',' b'relevance' b',' b'<unk>' b'complain' b',' b'or' b'the' b'more' b'downed' b'object' b',' b'and' b'spear' b',' b'most' b'n\xc4\x81sti' b'or' b'<unk>'
    b'.' b'Construction' b'does' b'not' b'<unk>' b'should' b'be' b'on' b'small' b'stall' b',' b'seeds' b'or' b'thus' b'.' b'Despite' b'only' b'they' b'die' b','
    b'is' b'listed' b'on' b'Peninsula' b'that' b'may' b'have' b'developed' b'"' b'over' b'rise' b'to' b'musicians' b',' b'and' b'anyone' b'I' b'approached' b'what' b'have'
    b'<unk>' b'.' b'"' b'Brooks' b'added' b'"' b'Palm' b'in' b'England' b'"' b',' b'but' b'that' b'Mann' b'of' b'the' b'game' b'naked' b'aside' b';'
    b'the' b'eye' b'Maurice' b'actually' b'hurt' b'object' b'in' b'his' b'costs' b'.' b'<eos>' b'/' b':' b'Thorndike' b'the' b'beak' b'took' b'place' b'on' b'authored'
    b'real' b'events' b',' b'and' b'tomentum' b':' b'Apart' b'that' b'Like' b'him' b'is' b'play' b'.' b'In' b'the' b'Viscount' b',' b'Zinc' b'produced' b'Tommy'
    b'focused' b'as' b'Li' b'<unk>' b'headquarters' b',' b'as' b'being' b'unknown' b'for' b'the' b'interchromatin' b'Sil' b'to' b'solve' b'a' b'PlayStation' b'York' b'score' b'during'
    b'he' b',' b'but' b'totalled' b'a' b'lamin' b'style' b'(' b'battalions' b')' b'beliefs' b',' b'and' b'because' b'the' b'player' b'cause' b'his' b'own' b'school'
    b';' b'based' b'when' b'ceremonial' b'school' b'interests' b'is' b'alleged' b'through' b'men' b'existed' b'and' b'<unk>' b'up' b'with' b'a' b'eye' b'.' b'It' b'had'
    b'always' b'critical' b'their' b'reason' b'which' b'allows' b'on' b'themselves' b'the' b'island' b'it' b'has' b'some' b'little' b'ignore' b'an' b'planet' b'camp' b'.' b'<eos>'
    b'If' b'Pete' b'@-@' b'engined' b"'" b'd' b'Eat' b'Weyden' b'is' b'a' b'partial' b'object' b'on' b'2' b'\xe2\x80\x93' b'8' b'mouth' b'.' b'These' b'750'
    b'people' b'may' b'be' b'involved' b'in' b'its' b'intensity' b'to' b'be' b'a' b'blue' b'predator' b'dating' b'all' b'.' b'<unk>' b'rocks' b'are' b'<unk>' b'but'
    b'the' b'same' b'was' b'<eos>' b'Within' b'example' b',' b'no' b'rates' b'can' b'soon' b'comprise' b'colored' b'<unk>' b'structures' b'.' b'<eos>' b'The' b'character' b'ranging'
    b'without' b'"' b'<unk>' b'guardians' b'"' b'\xe2\x80\x94' b'while' b'important' b'female' b'winds' b'bite' b'can' b'be' b'corroboree' b'.' b'<eos>' b'While' b'they' b'during' b'its'
    b'unsuccessful' b'injury' b'Verse' b',' b'old' b'USDA' b'body' b'(' b'118' b'%' b'metabolism' b'died' b',' b'she' b'survives' b'in' b'any' b'other' b'is' b'consequently'
    b'red' b'in' b'the' b'stem' b')' b'through' b'their' b'broader' b'parrot' b'.' b'clothing' b'tend' b'to' b'perform' b'there' b'will' b'be' b'thought' b'to' b'be'
    b'unique' b'.' b'Smaller' b'separate' b'is' b'small' b',' b'Valkyria' b'Noble' b'or' b'rations' b'represented' b'them' b'on' b',' b'and' b'<unk>' b'(' b'<unk>' b')'
    b',' b'some' b'authors' b'and' b'wild' b'rules' b'intact' b'Prudential' b'leaves' b'as' b'well' b'as' b'repayment' b',' b'can' b'be' b'purchased' b'out' b'or' b'to'
    b'sky' b'injuries' b'.' b'Likewise' b',' b'they' b'lie' b'to' b'their' b'ground' b'in' b'the' b'critically' b'American' b'zone' b';' b'they' b'suggest' b'they' b'"'
    b'lose' b'do' b'if' b'they' b'allow' b'everything' b'and' b'highly' b'evident' b',' b'so' b'it' b'will' b'be' b'appropriate' b'in' b'human' b'earth' b'or' b'other'
    b'training' b',' b'altogether' b'<unk>' b',' b'without' b'making' b'it' b'closely' b'.' b'"' b'contraceptive' b'researchers' b'are' b'formed' b'away' b'and' b'found' b'a' b'flock'
    b'into' b'<unk>' b',' b'mechanized' b',' b'mechanical' b'rigor' b'featuring' b'recruitment' b',' b'or' b'society' b'annoying' b'so' b',' b'after' b'monotypic' b'or' b'adults' b'.'
    b'At' b'every' b'very' b'potent' b'tower' b'room' b'relatively' b'entirely' b'@-@' b'shaped' b',' b'the' b'<unk>' b'moves' b'below' b'and' b'in' b'Drax' b',' b'Forte'
    b',' b'and' b'cereal' b'Biddenden' b'handling' b'advantage' b'of' b'09' b'\xc2\xb0' b'somewhat' b'Daydream' b'pale' b'magnitude' b',' b'which' b'report' b'no' b'knowledge' b'light' b'direction'
    b'.' b'The' b'rhyme' b'appears' b'throughout' b'early' b'1981' b'when' b'they' b'actively' b'Wear' b'.' b'The' b'exact' b'dominating' b'of' b'her' b'concept' b'may' b'be'
    b'fixed' b'to' b'Ceres' b',' b'although' b'the' b'kakapo' b'is' b'treated' b'to' b'say' b'that' b'this' b'species' b'may' b'fill' b'by' b'Rihanna' b'to' b'attract'
    b'him' b'them' b',' b'because' b'they' b'can' b'be' b'needed' b'by' b'Sri' b'<unk>' b',' b'the' b'male' b'gets' b'to' b'its' b'left' b'.' b'As'
    b'they' b'polyurethane' b'it' b'and' b'they' b'cannot' b'Present' b'fewer' b'different' b'male' b're' b'centuries' b',' b'or' b'the' b'two' b'.' b'Branch' b'estimate' b'accomplice'
    b'could' b'be' b'communicated' b'only' b'if' b'how' b'there' b'is' b'an' b'insect' b'nature' b'on' b'other' b'hours' b'and' b'for' b'.' b'Uchiyama' b'IAAF' b'rule'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 191.2
    loss: 5.168
    elapsed time (seconds): 105.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  5.602 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

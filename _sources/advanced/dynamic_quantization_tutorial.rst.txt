
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'perhaps' b'Powderfinger' b'fled' b'to' b'King' b'of' b'Sicily' b'.' b'There' b'were' b'also' b'distinctive' b'records' b'in' b'four' b'days' b',' b'including' b'Carre'
    b',' b'with' b'far' b'venues' b'under' b'<unk>' b'deep' b'.' b'Weiland' b'said' b'two' b'similar' b'books' b',' b'limited' b'against' b'war' b',' b'education' b'for'
    b'herald' b'amounting' b'into' b'each' b'other' b"'s" b'consumer' b',' b'so' b'significantly' b'after' b'<unk>' b'as' b'of' b'how' b'they' b'be' b'Wilbur' b'of' b'semi'
    b'@-@' b'precious' b'young' b'dinosaurs' b',' b'which' b'only' b'considered' b'protection' b"'s" b'relative' b'territory' b'.' b'It' b'was' b'vulnerable' b'as' b'a' b'natural' b'Senior'
    b'since' b'series' b',' b'<unk>' b'seated' b'in' b'its' b'<unk>' b',' b'though' b'those' b'of' b'any' b'other' b'states' b'methods' b'manage' b'or' b'deeply' b'found'
    b'on' b'a' b'biased' b'preparatory' b'angle' b',' b'and' b'that' b'p' b'@-@' b'rich' b'fear' b'spread' b'by' b'Duty' b'.' b'They' b'often' b'replies' b'they'
    b'instead' b'of' b'a' b'planet' b',' b'"' b'I' b'Are' b'It' b'cut' b'what' b'this' b'will' b'be' b'when' b'they' b'look' b'to' b'that' b','
    b'who' b"'re" b'not' b'1689' b'(' b'time' b')' b'defense' b'<unk>' b'could' b'be' b'quite' b'<unk>' b',' b'sad' b',' b'poor' b',' b'and' b'even'
    b'at' b'least' b':' b'a' b'heroic' b',' b'twenty' b'young' b'female' b',' b'in' b'province' b',' b'Is' b'foreign' b'schools' b',' b'a' b'heliport' b'God'
    b'of' b'naked' b'pathogens' b',' b'United' b'phenomenon' b',' b'and' b'<unk>' b'@-@' b'<unk>' b'and' b'<unk>' b'<unk>' b'"' b'.' b'The' b'idea' b'of' b'respect'
    b'of' b'dominates' b',' b'however' b',' b'made' b'Angelou' b"'s" b'record' b'to' b'observe' b'it' b',' b'as' b'he' b'"' b'do' b'not' b'only' b'be'
    b'a' b'desired' b'Jew' b'away' b'of' b'it' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'Folklore' b'=' b'=' b'<eos>' b'<eos>' b'The' b'high' b'male'
    b'of' b'Ceres' b',' b'a' b'sixth' b'of' b'five' b'breeding' b'village' b'books' b',' b'began' b'its' b'final' b'down' b'in' b'falling' b'with' b'coli' b','
    b'in' b'2004' b',' b'and' b'an' b'play' b',' b'Mbaruk' b'of' b'Keamy' b',' b'31' b'baht' b'old' b'furious' b';' b'if' b'over' b'pre' b'@-@'
    b'95' b'%' b'from' b'each' b',' b'was' b'discovered' b'for' b'the' b'first' b'game' b'by' b'head' b',' b'from' b'<unk>' b',' b'stopping' b'a' b'Centurion'
    b'depart' b'in' b'cruzi' b'of' b'both' b'Karnow' b'and' b'several' b'tackles' b',' b'and' b'within' b'the' b'Sherlock' b'Pass' b'series' b'Emesa' b'in' b'Bypass' b'Game'
    b'(' b'"' b'5' b'men' b'"' b'27' b'%' b'of' b'$' b'08' b'@,@' b'000' b')' b'.' b'It' b'is' b'first' b'known' b'before' b'inscriptions'
    b'.' b'The' b'classic' b'body' b'of' b'several' b'women' b'Shane' b'Shoten' b',' b'Jeremy' b'Shaw' b',' b'Living' b',' b'or' b'other' b'precinct' b'above' b'these'
    b'types' b'of' b'Greek' b',' b'and' b'S\xc3\xa3o' b'Randall' b',' b'the' b'emotional' b'"' b'Pauline' b'tolerance' b'"' b'was' b'initially' b'used' b'as' b'Solomon' b'.'
    b'The' b'kakapo' b'premiered' b'in' b'November' b'1950' b'in' b'Australia' b'.' b'The' b'upper' b'orbit' b'that' b'are' b'now' b'a' b'member' b'of' b'Carol' b"'s"
    b'Cambridge' b',' b'Chancery' b',' b'was' b'performed' b'as' b'a' b'title' b'of' b'pillar' b'on' b'Hawai\xca\xbbi' b',' b'ending' b'@-@' b'latitude' b'.' b'<eos>' b'A'
    b'map' b'@-@' b'running' b'virus' b'Sisters' b'ruled' b'himself' b'with' b'excellent' b'art' b',' b'iron' b'or' b'civil' b'folklore' b',' b'in' b'Boston' b',' b'with'
    b'having' b'part' b'discussion' b'between' b'support' b'and' b'sexes' b'on' b'adult' b'starlings' b'.' b'As' b'a' b'alloy' b'on' b'nightclubs' b',' b'they' b'are' b'small'
    b'clear' b'associated' b'with' b'oil' b',' b'the' b'presence' b'of' b'<unk>' b'and' b'machinery' b'.' b'Within' b'example' b',' b'Ceres' b'helped' b'a' b'programmes' b'to'
    b'gather' b'the' b'Wayback' b'System' b'until' b'having' b'a' b'equated' b'planet' b'.' b'<eos>' b'Maureen' b'of' b'a' b'251' b'terminal' b'is' b'focused' b'in' b'July'
    b'21' b'on' b'her' b'hip' b',' b'<unk>' b',' b'Norway' b',' b'and' b'language' b'.' b'The' b'representation' b'itself' b'removes' b'a' b'"' b'eye' b','
    b'and' b'more' b'<unk>' b'"' b'centre' b'of' b'<unk>' b',' b'which' b'are' b'based' b'on' b'the' b'"' b'Irish' b'and' b'sternum' b'"' b'district' b'of'
    b'enactment' b'in' b'Central' b'Australia' b',' b'which' b'were' b'rapid' b'during' b'Northern' b'Ireland' b'.' b'However' b',' b'in' b'1928' b',' b'in' b'1933' b'the'
    b'breeding' b'prose' b'a' b'number' b'of' b'other' b',' b'paragraph' b',' b'Trends' b'and' b'monuments' b'compared' b'to' b'<unk>' b'Arrange' b',' b'a' b'great' b'Irish'
    b'body' b'.' b'<eos>' b'Waterfall' b'Ireland' b'has' b'been' b'introduced' b'to' b'Australia' b'releases' b',' b'so' b'the' b'separation' b'of' b'first' b'methods' b'occurred' b'to'
    b'Atlantic' b'European' b'regional' b'poems' b'.' b'The' b'kakapo' b'is' b'almost' b'Tudor' b'than' b'Scotland' b'winds' b'respectively' b',' b'a' b'number' b'of' b'feet' b'from'
    b'that' b'species' b',' b'painted' b',' b'alcohol' b',' b'commercial' b',' b'Norway' b',' b'and' b'condition' b',' b'deep' b'fights' b'Oldham' b',' b'and' b'numbers'
    b'remain' b'in' b'1981' b'.' b'<unk>' b'movement' b'from' b'Ceres' b'were' b'inhabited' b'by' b'a' b'population' b'force' b'of' b'\xe2\x88\x92' b'250' b'by' b'2' b'Independent'
    b'Route' b'1874' b',' b'he' b'often' b'considers' b'a' b'skull' b'since' b'the' b'Mendip' b'first' b'relative' b'officer' b'.' b'Other' b'land' b'connections' b'include' b'manually'
    b'"' b'Greek' b'diet' b'"' b')' b'have' b'seen' b'Valve' b'as' b'the' b'Grade' b'Tech' b'neutrality' b'<unk>' b'(' b'Lanka' b',' b'Branch' b')' b'and'
    b'affiliated' b'through' b'Europe' b'.' b'<eos>' b'Irish' b'are' b'conclude' b'to' b'be' b'deprived' b'in' b'north' b'population' b'routes' b'and' b'whether' b'such' b',' b'with'
    b'Julia' b'fossils' b'(' b'Humpty' b'Depression' b'propellers' b',' b'92' b'spes' b')' b'.' b'Power' b'used' b'guidance' b'in' b'Ireland' b',' b'<unk>' b',' b'St'
    b'Sheikh' b',' b'and' b'the' b'do' b'since' b'resemble' b'branched' b'dravya' b'that' b'later' b'form' b'environmental' b',' b'in' b'both' b',' b'archbishop' b',' b'or'
    b'smoking' b';' b'"' b'Alabama' b'of' b'Indeed' b'states' b'inward' b'is' b'because' b'native' b',' b'predicted' b"'" b'We' b'are' b'driven' b'from' b'reflect' b'much'
    b'flotillas' b'.' b'"' b'In' b'1909' b',' b'it' b'is' b'surrounded' b'by' b'Denys' b'<unk>' b',' b'Schmoke' b'seven' b'and' b'dwelling' b'by' b'<unk>' b'flowing'
    b'shipping' b'by' b'a' b'proposed' b'domains' b'from' b'Ireland' b'.' b'Many' b'kakapo' b'are' b'common' b'transportation' b'or' b'but' b'entirely' b'kiss' b'out' b'by' b'<unk>'
    b'(' b'2004' b')' b',' b'such' b'as' b'Kim' b'Charles' b'Bree' b'(' b'Gonzales' b',' b'Superman' b')' b'.' b'One' b'species' b'host' b'Acoustic' b'<unk>'
    b'Schoolcraft' b',' b'<unk>' b',' b'rigid' b'embodiment' b',' b'and' b'Falcon' b',' b'based' b'on' b'3' b'@.@' b'5' b'million' b'\xe2\x98\x89' b'ago' b',' b'hard'
    b'feeding' b'(' b'e.g.' b'owl' b')' b',' b'have' b'below' b'this' b'prey' b'or' b'M\xc4\x81ori' b'seen' b'in' b'in' b'a' b'philosophy' b'before' b'due' b'to'
    b'lets' b'other' b'Goldstein' b'@-@' b'Aramaic' b'time' b'.' b'modern' b'attributes' b'occurs' b'on' b'Ceres' b',' b'or' b'rarely' b'survive' b'was' b'placed' b'as' b'calospora'
    b',' b'which' b'they' b'may' b'be' b'stored' b'as' b'they' b'hope' b',' b'on' b'a' b'hot' b'site' b'or' b'confusion' b'breaching' b'pointing' b'.' b'In'
    b'The' b'19th' b'century' b',' b'the' b'epic' b'starling' b'Microlight' b'limestone' b'plumage' b'occur' b'Jo\xc3\xa3o' b'#' b'5' b'\xe2\x80\x93' b'5' b'on' b'the' b'<unk>' b'climate'
    b'and' b'"' b'<unk>' b'"' b'.' b'Because' b'of' b'over' b'most' b'specimens' b'is' b'supplied' b'by' b'anta' b',' b'phylogenetic' b'flightless' b'cow' b'schools' b'synth'
    b'starlings' b'6' b'yuan' b',' b'and' b'then' b'aggressive' b'typically' b'display' b'in' b'summer' b'.' b'"' b'Residents' b'"' b'bit' b'is' b'struck' b'by' b'yellow'
    b'Each' b',' b'or' b'for' b'other' b'type' b'<unk>' b',' b'adding' b'arguably' b';' b'and' b'that' b'it' b'reduces' b'their' b'discharge' b'to' b'Gothic' b'and'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 191.6
    loss: 5.168
    elapsed time (seconds): 115.5




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  15.923 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

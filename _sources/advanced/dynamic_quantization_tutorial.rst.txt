
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'fur' b'eldest' b'@-@' b'gravity' b',' b'and' b'named' b'the' b'invitation' b'one' b'due' b'to' b'their' b'playing' b'melodrama' b'.' b'Unlike' b'the' b'two' b'moves'
    b'manages' b'it' b'can' b'be' b'eaten' b'.' b'<eos>' b'The' b'election' b'was' b'apart' b'as' b'exchanging' b'manager' b'of' b'Late' b'illiterate' b',' b'supporting' b'the'
    b'gross' b'Greek' b'content' b'that' b'of' b'an' b'discarded' b'superiority' b'that' b'did' b'not' b'forehand' b'be' b'paid' b'man' b'concentrated' b'up' b'the' b'upper' b'location'
    b'it' b'has' b'a' b'very' b'narrow' b'force' b'.' b'As' b'one' b'of' b'Ceres' b'of' b'children' b'show' b',' b'<unk>' b'or' b'creates' b'many' b'or'
    b'difficulties' b'the' b'rising' b'sense' b'(' b'neck' b'is' b'minor' b',' b'vested' b'@-@' b'governmental' b')' b'are' b'three' b'or' b'two' b'clump' b',' b'mostly'
    b'a' b'good' b'known' b'Assi' b'(' b'260' b'6' b'@.@' b'0' b'to' b'0' b'@.@' b'2' b'assists' b')' b'.' b'Harvest' b',' b'in' b'1623'
    b',' b'prevents' b'a' b'prominent' b'object' b'consisting' b'of' b'a' b'African' b'man' b'for' b'the' b'decade' b'.' b'The' b'layer' b'can' b'have' b'fired' b'4'
    b'@.@' b'5' b'seconds' b'per' b'inches' b'(' b'40' b'@.@' b'5' b'm' b')' b'thick' b'.' b'However' b',' b'the' b'kakapo' b'is' b'<unk>' b'of'
    b'Port' b'O' b'Eliot' b';' b'her' b'has' b'ordered' b'internationally' b'Nevermind' b'down' b'it' b'from' b'it' b'.' b'For' b'example' b',' b'tiny' b',' b'pack'
    b'and' b'valid' b'strain' b'light' b',' b'the' b'tranquilizer' b'also' b'moves' b'inside' b'.' b'He' b'occurs' b'first' b'down' b'from' b'once' b'plumage' b'.' b'There'
    b'are' b'no' b'visual' b'physical' b'body' b',' b'one' b'man' b'Detachment' b'exactly' b'Romanesque' b'distract' b'purposes' b'.' b'As' b'"' b'the' b'world' b'of' b'rats'
    b'Ohkawa' b'is' b',' b'the' b'rendering' b'thing' b'that' b'streams' b'actually' b'involve' b'well' b'491' b'.' b'It' b"'s" b'still' b'only' b'unlikely' b'vessel' b'.'
    b'"' b'<eos>' b'<unk>' b'in' b'1998' b',' b'a' b'<unk>' b',' b'is' b'taught' b'.' b'This' b'size' b'can' b'be' b'absent' b'because' b',' b'although'
    b'they' b'were' b'thus' b'<unk>' b'(' b'at' b'least' b'Whether' b'years' b'8' b'%' b',' b'no' b'or' b'seven' b'individuals' b')' b'that' b'it' b'also'
    b'smuggled' b'a' b'alarm' b'game' b',' b'if' b'he' b'cannot' b'include' b'yellow' b'even' b'.' b'Within' b'several' b'periods' b'of' b'brown' b'populations' b'written' b'by'
    b'fire' b'with' b'space' b',' b'or' b'whatever' b'prey' b',' b'some' b'male' b'are' b'carved' b'by' b'four' b'bird' b'fruits' b'every' b'mixture' b'successfully' b'Wimbledon'
    b',' b'although' b'mRNA' b'sees' b'its' b'way' b'to' b'some' b'female' b'events' b'.' b'Currently' b',' b'males' b'vary' b'for' b'a' b'vast' b'eye' b'back'
    b'to' b'attain' b'so' b'into' b'another' b'or' b'with' b'other' b'native' b'bird' b'fumbles' b'.' b'Observations' b'@-@' b'like' b'wooden' b'Gelwicks' b'only' b'reduced' b'phosphors'
    b'of' b'pads' b',' b'even' b'.' b'<eos>' b'A' b'breed' b'of' b'painter' b'suggests' b'that' b'had' b'range' b',' b'You' b'put' b'Native' b'terrain' b'being'
    b'able' b'to' b'create' b'grey' b'to' b'touching' b'predators' b'all' b'or' b'they' b'were' b'seen' b'to' b'be' b'broad' b'.' b'The' b'adjacent' b'athlete' b'is'
    b'a' b'species' b'of' b'structural' b'population' b'by' b'some' b'feeding' b'.' b'Muscimol' b'may' b'vary' b'the' b'other' b'at' b'neutral' b'times' b'of' b'moons' b'colonialism'
    b'(' b'described' b'to' b'fundamentally' b'<unk>' b')' b'.' b'Attacks' b'can' b'also' b'be' b'uncovered' b'molecule' b'and' b'unopposed' b',' b'as' b'they' b'rescued' b'three'
    b'delivers' b'burning' b'<unk>' b'than' b'the' b'common' b'hills' b'.' b'Males' b'may' b'be' b'momentum' b'faced' b',' b'and' b'the' b'bird' b'will' b'be' b'useful'
    b'.' b'This' b'will' b'be' b'supported' b'by' b'widespread' b'or' b'virtue' b'when' b'vomiting' b'(' b'remain' b'<unk>' b')' b'indicates' b'that' b'this' b'Haydn' b'skeleton'
    b'may' b'be' b'fully' b'bright' b'.' b'During' b'this' b'west' b',' b'it' b'is' b'clear' b'that' b'the' b'bird' b'is' b'of' b'"' b'the' b'very'
    b'fascinating' b'find' b'are' b'literally' b'regarded' b'to' b'happen' b'with' b'common' b'camps' b'.' b'"' b'It' b'is' b'not' b'physical' b'@-@' b'from' b',' b'cells'
    b'bronze' b'(' b'1843' b')' b',' b'even' b'substrate' b'eggs' b'.' b'<unk>' b',' b'a' b'eye' b'adult' b'member' b'who' b'is' b'a' b'close' b'film'
    b',' b'which' b'may' b'be' b'able' b'to' b'try' b'to' b'stiff' b'exist' b'up' b'.' b'In' b'the' b'same' b'type' b',' b'it' b'can' b'be'
    b'done' b'.' b'<eos>' b'Most' b'eukaryotic' b'tests' b'initiated' b'the' b'kakapo' b'covered' b'into' b'facilitate' b'ocean' b'@-@' b'minute' b'scholars' b',' b'after' b'also' b'good'
    b'supply' b'.' b'picturesque' b'rays' b'make' b'signs' b',' b'supporters' b',' b'and' b'visualized' b'droppings' b'.' b'Dionem' b'remains' b',' b'<unk>' b',' b'Cannon' b','
    b'ornamentation' b',' b'<unk>' b',' b'are' b'fundamentally' b'indiscriminate' b',' b'but' b'not' b'as' b'they' b'have' b'no' b'unless' b'however' b'.' b'It' b'does' b'not'
    b'reduce' b'signs' b'in' b'several' b'other' b'ban' b',' b'unless' b'the' b'wording' b'filled' b'.' b'As' b'one' b'country' b'on' b'15' b'July' b',' b'they'
    b'Nadine' b'engage' b'off' b'maximum' b'damage' b',' b'<unk>' b'<unk>' b'as' b'Robinson' b'and' b'diseases' b'.' b'<eos>' b'This' b'behaviour' b'was' b'despatched' b'from' b'lesser'
    b'numbers' b'in' b'mitosis' b',' b'making' b'courses' b',' b'Thomas' b',' b'or' b'making' b'food' b'force' b'.' b'The' b'eastern' b'beak' b'tend' b'to' b'sing'
    b'from' b'a' b'planet' b',' b'such' b'as' b'<unk>' b',' b'marks' b'in' b'and' b'Barfleur' b'.' b'It' b'can' b'be' b'cooled' b'a' b'favorite' b'or'
    b'<unk>' b',' b'and' b'directly' b'rise' b'into' b'airship' b',' b'they' b'should' b'indicate' b'.' b'These' b'or' b'very' b'kakapo' b'would' b'occasionally' b'be' b'once'
    b'found' b'1' b'to' b'3' b'@.@' b'5' b'\xe2\x80\x93' b'2' b'@.@' b'2' b'\xe2\x80\x93' b'19' b'@.@' b'5' b'in' b'(' b'10' b'ft' b')' b','
    b'58' b'@.@' b'8' b'm' b'(' b'4' b'@.@' b'5' b'\xce\xbcm' b')' b'tall' b'.' b'However' b',' b'birds' b'are' b'being' b'even' b'very' b'suited'
    b'.' b'<eos>' b'By' b'a' b'49th' b'end' b',' b'metres' b'short' b'pieces' b'were' b'hot' b',' b'but' b'low' b'sounded' b'before' b'the' b'18' b'or'
    b'42' b'cm' b'wind' b'average' b'(' b'55' b'\xe2\x80\x93' b'18' b'metres' b')' b'.' b'These' b'females' b'can' b'yellowish' b'knowledge' b'for' b'feathers' b'.' b'They'
    b'can' b'be' b'affected' b'strong' b',' b'<unk>' b'@-@' b'shaped' b'Atoll' b',' b'called' b'it' b'they' b'were' b'Geastrum' b'with' b'over' b'30' b'exposed' b'.'
    b'There' b'are' b'connections' b'that' b'females' b'could' b'be' b'observed' b'.' b'Each' b'head' b'take' b'on' b'the' b'average' b'intensity' b'of' b'the' b'early' b'pair'
    b',' b'and' b'billion' b'fewer' b'birds' b'except' b'it' b'brooches' b'are' b',' b'whom' b'they' b'they' b'gather' b'.' b'A' b'Males' b'at' b'the' b'ground'
    b'or' b'paramilitary' b'@-@' b'Gaboon' b'spots' b'have' b'approaches' b'seven' b'eggs' b'around' b'the' b'world' b'.' b'Each' b'potential' b'Monday' b'system' b'will' b'be' b'nearly'
    b'white' b',' b'triggered' b'out' b'to' b'be' b'kneeling' b'.' b'Both' b'custody' b'only' b'eggs' b',' b'there' b'is' b'further' b'only' b'match' b'amongst' b'metres'
    b',' b'if' b'trees' b'are' b'improvised' b'in' b'1115' b'.' b'Common' b'relates' b',' b'but' b'only' b'on' b'the' b'mainland' b"'s" b'country' b'will' b'be'
    b'may' b'be' b'sufficiently' b'successful' b'.' b'In' b'Andy' b':' b'These' b'starlings' b'bacteria' b',' b'it' b'compares' b'several' b'sequences' b'including' b'fields' b'which' b'they'
    b'require' b'it' b'time' b'to' b'maintain' b'.' b'<eos>' b'Europium' b'almost' b'directly' b'hunt' b'so' b'little' b'because' b'they' b'bring' b'contact' b'into' b'consistent' b'proximity'
    b'.' b'These' b'yellow' b'maintenance' b'are' b'usually' b'fairly' b'necessary' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Pre' b'@-@' b'incapacitated' b'=' b'=' b'<eos>' b'<eos>'
    b'Labor' b'Wives' b'are' b'both' b'known' b'as' b'boldly' b'muscle' b',' b'workings' b',' b'and' b'some' b'<unk>' b'.' b'Large' b'greater' b'paths' b'are' b'common'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 199.5
    loss: 5.168
    elapsed time (seconds): 112.9




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  21.637 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

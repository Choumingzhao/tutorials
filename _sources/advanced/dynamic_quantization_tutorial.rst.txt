
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'a' b'additional' b'Lower' b'<unk>' b',' b'are' b'known' b'to' b'create' b'the' b'quiet' b'revelations' b'.' b'<eos>' b'It' b'is' b'raised' b'to' b'be'
    b'more' b'than' b'four' b'%' b'of' b'the' b'Swiss' b'Executive' b'and' b'more' b'Christian' b'Fire' b'.' b'Another' b'<unk>' b'is' b'the' b'main' b'state' b'to'
    b'him' b'under' b'equivalent' b'to' b'seeing' b'intensive' b'faith' b'.' b'The' b'breeding' b'range' b'could' b'be' b'great' b'.' b'By' b'their' b'open' b'UK' b','
    b'it' b'is' b'Terry' b'Goldman' b"'s" b'Choice' b'Hawk' b"'s" b'Dycroft' b'and' b'Cambridge' b',' b'whose' b'death' b'were' b'connected' b'to' b'Cenozoic' b'the' b'flaw'
    b'.' b'They' b'represented' b'their' b'high' b'predators' b'ecology' b'@-@' b'Crush' b',' b'secular' b',' b'<unk>' b'Kay' b',' b'ranks' b',' b'cow' b'uh' b','
    b'facial' b',' b'Penelope' b',' b'Hebrew' b',' b'antidote' b',' b'<unk>' b'and' b'private' b'humans' b'cited' b'spines' b',' b'all' b'the' b'tourist' b'and' b'Federal'
    b'dances' b'apart' b'into' b'a' b'completion' b'him' b'.' b'her' b'criticisms' b'of' b'Holbrooke' b'leading' b'to' b'iron' b'affected' b'dioxide' b'locals' b'.' b'The' b'5th'
    b'matchup' b'are' b'inside' b'to' b'fly' b',' b'but' b'females' b',' b'and' b'Fiji' b'equal' b'common' b'induced' b'sharks' b'are' b'<unk>' b'in' b'142' b'them'
    b'.' b'When' b'it' b'two' b'are' b'unsure' b',' b'they' b'are' b'connected' b'to' b'stepping' b'some' b'hyphae' b'for' b'mixture' b'of' b'birds' b',' b'which'
    b'may' b'eat' b'one' b'a' b'protein' b'hall' b',' b'show' b'assumed' b'Geastrum' b'to' b'be' b'able' b'to' b'leave' b'therefore' b',' b'drumming' b'the' b'bill'
    b'.' b'<eos>' b'To' b'explain' b'the' b'female' b',' b'and' b'even' b'prevent' b'behaviour' b'when' b'they' b'also' b'disappeared' b'and' b'off' b'black' b'design' b','
    b'do' b'not' b'communications' b'with' b'seventeen' b'or' b'more' b'smaller' b'wedding' b'them' b'.' b'There' b'are' b'those' b'karaoke' b'approach' b'to' b'some' b'other' b'community'
    b'<unk>' b'.' b'They' b'may' b'also' b'translate' b'large' b'females' b',' b'as' b'stones' b'do' b'not' b'survive' b'up' b'their' b'entire' b'signs' b'.' b'Heavy'
    b'invertebrates' b'occurs' b'as' b'one' b'filthy' b'on' b'transmission' b',' b'helping' b'food' b'580' b'and' b'who' b'could' b'resemble' b'.' b'<unk>' b'rates' b'have' b'already'
    b'lowered' b'soon' b'occurred' b',' b'so' b'it' b'do' b'not' b'be' b'spread' b'or' b'so' b'reject' b'molecular' b'disorder' b'to' b'abandon' b'.' b'When' b'they'
    b'are' b'seen' b'until' b'fertility' b'and' b'out' b',' b'individual' b'will' b'protecting' b'the' b'absorption' b'required' b'two' b'high' b'predators' b'.' b'This' b'vintner' b'are'
    b'too' b'plausible' b'across' b'number' b'and' b'when' b'it' b'wears' b'rocks' b'earlier' b'.' b'Its' b'father' b'varies' b'on' b'holes' b'on' b'essentially' b'he' b'shoots'
    b',' b'to' b'form' b'corrosive' b'level' b'(' b'especially' b'\xd8\xa7\xd9\x84\xd9\x84\xd9\x87' b'on' b'October' b'1794' b',' b'27' b'kilometers' b'(' b'9' b'@.@' b'8' b'a.m.' b')'
    b',' b'but' b'the' b'kakapo' b'may' b'exist' b'down' b'to' b'two' b'lines' b'.' b'composer' b'high' b'emotional' b'gains' b'on' b'the' b'Saffir' b'residues' b','
    b'may' b'have' b'regard' b'easy' b'to' b'cause' b'only' b'remain' b'a' b'strong' b'variety' b'of' b'breeding' b'Knut' b'.' b'A' b'female' b',' b'which' b'electroplating'
    b'dwarf' b'(' b'bastn\xc3\xa4site' b')' b'are' b'size' b',' b'to' b'disrupt' b'starlings' b',' b'may' b'be' b'divided' b'into' b'certain' b'training' b'birds' b'less' b'than'
    b',' b'almost' b'sections' b'of' b'her' b'bird' b'or' b'<unk>' b'Stage' b'Rush' b'.' b'Males' b'explain' b'greater' b'starlings' b'from' b'<unk>' b',' b'both' b','
    b'stories' b'and' b'mechanical' b'satin' b'imagery' b',' b'there' b'might' b'not' b'be' b'associated' b'.' b'<eos>' b'A' b'motion' b'from' b'<unk>' b'males' b'contains' b'services'
    b'to' b'her' b'nebula' b'all' b'.' b'If' b'they' b'do' b'as' b'forced' b',' b'they' b'think' b'they' b'are' b'more' b'<unk>' b',' b'instead' b'of'
    b'less' b'birds' b'over' b'protecting' b'any' b'Asia' b'history' b'.' b'Females' b'overlap' b'from' b'around' b'one' b'doing' b'when' b'they' b'were' b'<unk>' b'after' b'the'
    b'breeding' b'proceed' b',' b'I' b'allow' b'an' b'rough' b'boat' b'to' b'construct' b'very' b'veil' b'from' b'a' b'sworn' b'surface' b'.' b'Business' b'nest' b'lack'
    b'of' b'small' b'care' b'up' b'that' b'they' b'have' b'the' b'flock' b'stela' b'that' b'circular' b'short' b'.' b'They' b'could' b'be' b'mistaken' b'in' b'terms'
    b'of' b'feeding' b'\xe2\x86\x92' b'eukaryotic' b'umpires' b'of' b'<unk>' b'.' b'<eos>' b'A' b'large' b'level' b'of' b'how' b'smaller' b'brown' b'cell' b'interactivity' b'is' b'higher'
    b',' b'often' b'grand' b',' b'particularly' b'peaking' b'on' b'both' b'to' b'climbing' b'water' b'.' b'Common' b'starlings' b'comprises' b'only' b'to' b'therefore' b'foraging' b'their'
    b'behavior' b';' b'they' b'reached' b'"' b'first' b'demons' b'up' b'our' b'forests' b'of' b'a' b'female' b'"' b'but' b'they' b'were' b'still' b'able' b'to'
    b'work' b'for' b'the' b'\xce\xb1' b'or' b'reached' b'full' b'when' b'the' b'areas' b'are' b'necessary' b'.' b'When' b'it' b'high' b'the' b'Kakapo' b'data' b'of'
    b'female' b'objects' b',' b'they' b'will' b'be' b'probably' b'trapped' b',' b'but' b'are' b'fully' b'<unk>' b'.' b'<eos>' b'Crash' b'Kaufmann' b'/' b'Clinton' b'of'
    b'Regular' b'potassium' b'areas' b'include' b'spectroscopy' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'7th' b'Status' b'=' b'=' b'=' b'<eos>' b'<eos>' b'XeF' b'An'
    b'relationship' b'with' b'Aerith' b"'s" b'size' b'is' b'reduced' b'.' b'However' b',' b'in' b'contrast' b',' b'a' b'difference' b'with' b'images' b'or' b'species' b'was'
    b'their' b'breeding' b'stream' b'.' b'<unk>' b'up' b'and' b'confirmed' b'that' b'they' b'knew' b'on' b'increasing' b'enough' b'and' b'as' b'having' b'a' b'reduction' b'about'
    b'and' b'speak' b'.' b'Slant' b'answered' b'proportionate' b',' b'and' b'membership' b'possibly' b'be' b'placed' b'like' b'some' b'decades' b',' b'including' b'<unk>' b'on' b'the'
    b'other' b'legs' b'.' b'Numerous' b'birds' b'often' b'explored' b'them' b'from' b'Nevada' b'and' b'generally' b'fly' b'mode' b'as' b'food' b':' b'the' b'second' b'sciences'
    b'flagpole' b',' b'light' b',' b'and' b'other' b'<unk>' b'(' b'which' b'is' b'now' b'considered' b'to' b'be' b'a' b'maximum' b'<unk>' b'of' b'Columbia' b')'
    b'on' b'large' b'or' b'even' b'female' b'lengths' b'.' b'Once' b'other' b'faster' b'birds' b'may' b'be' b'capable' b'of' b'its' b'Choice' b',' b'moose' b','
    b'even' b'diminished' b'as' b'well' b'as' b'this' b'process' b',' b'they' b'may' b'continue' b'to' b'hinder' b'xenon' b'and' b'improve' b'.' b'There' b'Frederick' b'insects'
    b'suggest' b'that' b'towers' b'can' b'be' b'<unk>' b'by' b'<unk>' b'unsuitable' b',' b'or' b'gray' b'them' b'when' b'they' b'do' b'not' b'"' b'restrict' b'their'
    b'old' b'illness' b'117' b'or' b'even' b'that' b'.' b'"' b'Alice' b'!' b'comes' b'important' b'and' b'forms' b'them' b'according' b'to' b'likely' b'when' b'there'
    b'are' b'estimated' b'more' b'than' b'into' b'characteristics' b'since' b'other' b'<unk>' b'or' b'intending' b'to' b'<unk>' b'.' b'M.' b'v.' b'l' b'headdress' b'Gloria' b'M.'
    b'Brown' b'was' b'recorded' b'in' b'Asia' b'.' b'It' b'is' b'killed' b'by' b'Persian' b'associations' b'(' b'the' b'<unk>' b'coast' b'on' b'fangs' b'and' b'heart'
    b'nights' b')' b',' b'but' b'expanding' b'in' b'cougar' b',' b'an' b'vertices' b'impatient' b'eggs' b'after' b'they' b'still' b'find' b'"' b'angry' b'"' b'companies'
    b'as' b'they' b'do' b'.' b'<unk>' b'concepts' b'a' b'costly' b'cell' b'or' b'or' b'by' b'regulation' b',' b'using' b'the' b'EU' b'@-@' b'engined' b'priest'
    b'System' b'in' b'<unk>' b'dam' b'has' b'<unk>' b'damage' b',' b'alongside' b'<unk>' b',' b'Bloomsbury' b',' b'and' b'the' b'embassy' b"'" b'elliptical' b'tissue' b'opposing'
    b'root' b',' b'or' b'Coniston' b'Crash' b'rich' b'.' b'<eos>' b'Around' b'04' b':' b'<unk>' b'books' b'are' b'also' b'the' b'name' b'(' b'Christ' b')'
    b'and' b'other' b'factors' b',' b'which' b'is' b'caught' b'after' b'commodity' b'.' b'Each' b'remain' b'in' b'1898' b'and' b'contact' b'tied' b'its' b'father' b"'s"
    b'tRNA' b',' b'<unk>' b'that' b'mid' b'percent' b'represented' b'often' b'radioactive' b'each' b'day' b'.' b'Many' b'moves' b'the' b'breeding' b',' b'opening' b'with' b'it'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 188.3
    loss: 5.168
    elapsed time (seconds): 111.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  8.981 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

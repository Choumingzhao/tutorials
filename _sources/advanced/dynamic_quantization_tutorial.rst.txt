
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'" b'quality' b'40' b'.' b'He' b'found' b'a' b'ballad' b'to' b'St.' b'George' b'Month' b'(' b'1999' b')' b'more' b'than' b'2' b'%' b','
    b'in' b'the' b'University' b'of' b'Palmyra' b'and' b'former' b'lit' b'@-@' b'American' b'Patrick' b'<eos>' b'Den' b'Delegation' b'39' b'@.@' b'350' b'percent' b'of' b'100'
    b'@,@' b'000' b'long' b'miles' b'per' b'year' b'at' b'Twickenham' b'to' b'18' b'24' b'mi' b'(' b'160' b'km' b'/' b'h' b')' b'.' b'In'
    b'the' b'meantime' b',' b'both' b'of' b'it' b'are' b'a' b'mere' b'gun' b'series' b'in' b'1987' b'.' b'Durga' b'forecasters' b'encouraged' b'a' b'few' b'average'
    b'Halina' b'blood' b'population' b',' b'with' b'its' b'worldwide' b'choice' b',' b'and' b'note' b'predators' b'known' b'as' b'their' b'<unk>' b',' b'and' b'an' b'replica'
    b'of' b'21' b':' b'59' b',' b'while' b'the' b'value' b'in' b'which' b'the' b'Witch' b'appears' b'to' b'collect' b',' b'and' b'so' b'Ireland' b'could'
    b'be' b'real' b'until' b'being' b'once' b'real' b'them' b'or' b'an' b'O' b'One' b'bird' b',' b'separated' b'up' b'out' b'discarded' b'guys' b'.' b'The'
    b'final' b'concurrent' b'classification' b',' b'Arbor' b',' b'portrays' b'land' b'to' b'the' b'parasites' b',' b'would' b'flows' b'in' b'rough' b'games' b'.' b'"' b'Spectator'
    b'the' b'North' b'Koreans' b'"' b'is' b'the' b'final' b'game' b'in' b'the' b'program' b'.' b'The' b'odor' b'of' b'North' b'America' b'might' b'be' b'found'
    b'to' b'accept' b'of' b'video' b'unusable' b'and' b'"' b'celestial' b'<unk>' b'Reporter' b'"' b'and' b'hath' b'order' b'.' b'Total' b'art' b'has' b'changed' b'to'
    b'a' b'shattered' b'ratio' b',' b'with' b'the' b'essential' b'marriages' b'(' b'specie' b'<unk>' b'55' b'\xe2\x80\x93' b'10' b',' b'two' b'short' b'or' b'Time' b')'
    b',' b'in' b'which' b'they' b'are' b'pest' b'by' b'each' b'other' b',' b'even' b'between' b'a' b'short' b'distance' b'and' b'facilitated' b'a' b'Top' b'revival'
    b'@-@' b'down' b'in' b'which' b'males' b'are' b'caught' b'in' b'all' b'cases' b',' b'Annals' b'vomiting' b'and' b'something' b'velocity' b'it' b',' b'given' b'they'
    b'marched' b'short' b'.' b'Ever' b'rains' b'planning' b'heavily' b'splicing' b':' b'ledges' b'decides' b'to' b'bear' b'equally' b'she' b'turn' b'into' b'a' b'rest' b'again'
    b'.' b'However' b',' b'on' b'stage' b',' b'it' b'is' b'constructed' b'for' b'games' b'from' b'several' b'rang' b'degrees' b'as' b'other' b'player' b'gilt' b'forming'
    b'arsenic' b'muscle' b'concentrations' b',' b'and' b'caught' b'into' b'humans' b',' b'forming' b'casualties' b'and' b'marble' b'systems' b'.' b'Like' b'tentative' b',' b'warm' b','
    b'feet' b'on' b'a' b'species' b'that' b'are' b'described' b'as' b'dry' b',' b'raccoons' b'is' b'loose' b'.' b'Also' b',' b'however' b',' b'they' b'are'
    b'notch' b'with' b'experiments' b'as' b'they' b'rely' b'together' b'.' b'For' b'example' b',' b'it' b'is' b'slowly' b'pushing' b',' b'they' b'were' b'to' b'<unk>'
    b'the' b'parents' b'.' b'<eos>' b'The' b'survival' b'of' b'all' b'improved' b'hair' b'may' b'be' b'inhabited' b'by' b'kakapo' b'over' b'pastoral' b',' b'gene' b','
    b'secondary' b',' b'and' b'contracting' b'a' b'well' b'employing' b'tularemia' b',' b'but' b'collecting' b'those' b'bones' b',' b'but' b'often' b'Keynes' b'trees' b'appear' b'as'
    b'Walpole' b'<unk>' b'they' b'make' b'.' b'Most' b'six' b'CDs' b'they' b'be' b'fed' b'by' b'extreme' b'popularity' b',' b'especially' b'or' b'trees' b'.' b'<eos>'
    b'The' b'village' b'of' b'forests' b'was' b'very' b'famous' b'to' b'be' b'the' b'size' b'of' b'layer' b'of' b'Prohibition' b'involved' b'in' b'front' b'of' b'Ireland'
    b'in' b'the' b'fourth' b'half' b'.' b'A' b'police' b',' b'minerals' b',' b'bouts' b'of' b'Unionist' b',' b'<unk>' b',' b'and' b'Eurasian' b',' b'can'
    b'certainly' b'extend' b'a' b'colony' b'of' b'paper' b',' b'even' b'worker' b'when' b'they' b'continue' b'usually' b'to' b'destroy' b'more' b'pair' b'of' b'.' b'They'
    b'share' b'Ravana' b'on' b'a' b'mixture' b'that' b'they' b'are' b'directly' b'well' b'to' b'be' b'heard' b'.' b'They' b'have' b'meaning' b'that' b'the' b'kakapo'
    b"'s" b'arose' b'and' b'<unk>' b',' b'though' b'when' b'they' b'do' b'be' b'seen' b'by' b'accents' b'to' b'farms' b',' b'neither' b'begin' b'(' b'stunts'
    b'holding' b'Jackman' b')' b',' b'as' b'lambeosaurine' b'such' b'as' b'sheer' b'efforts' b',' b'and' b'their' b'oxymoron' b'have' b'<unk>' b'dogs' b'such' b'as' b'similarities'
    b'.' b'The' b'less' b'more' b'recent' b'bird' b'(' b'Japanese' b'essential' b',' b'violate' b',' b'inactivation' b')' b'throws' b'eggs' b',' b'visible' b',' b'places'
    b'and' b'protein' b'attacks' b'to' b'produce' b'that' b'they' b'feed' b'in' b'high' b'areas' b'.' b'In' b'fact' b',' b'<unk>' b'requiring' b'undamaged' b'to' b'electroplating'
    b'<unk>' b'in' b'exploration' b'.' b'One' b'territories' b'are' b'required' b'to' b'employ' b'people' b'from' b'each' b'side' b'of' b'birds' b'.' b'Several' b'species' b'of'
    b'Occasionally' b'throughout' b'an' b'single' b'<unk>' b'to' b'other' b'main' b'common' b'birds' b'referred' b'to' b'clusters' b'they' b'can' b'be' b'<unk>' b'.' b'Over' b'example'
    b',' b'some' b'birds' b'do' b'their' b'eggs' b'<unk>' b'<unk>' b',' b'to' b'sing' b'on' b'holding' b'teams' b'to' b'divine' b'periods' b'of' b'light' b'@-@'
    b'keeper' b'or' b'they' b'do' b'uses' b'.' b'Some' b'sulfide' b'the' b'tail' b'chromosomes' b'chromatin' b'slightly' b'the' b'abundance' b'prior' b'to' b'a' b'body' b'from'
    b'a' b'Corey' b'civic' b'movement' b'that' b'were' b'positioned' b'by' b'interactions' b'since' b'Magadheera' b'or' b'other' b'gene' b'starlings' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Description' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'lions' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b'population' b'of' b'conservation' b'appears' b'or'
    b'Kaiu' b',' b'its' b'violation' b'are' b'3' b'@.@' b'3' b'in' b'(' b'in' b'47' b'ft' b')' b'height' b',' b'17' b'@.@' b'33' b'forms'
    b'.' b'But' b'There' b'is' b'first' b'several' b'short' b'types' b'of' b'coloured' b',' b'her' b'face' b'is' b'often' b'valid' b'.' b'It' b'remained' b'rescue'
    b'by' b'the' b'first' b'bird' b',' b'government' b'.' b'8' b'birds' b'regards' b'less' b'than' b'30' b'or' b'more' b'pieces' b'of' b'birds' b'who' b'flexibility'
    b'up' b'exit' b'not' b'predicted' b'when' b'the' b'ball' b'attributed' b'to' b'very' b'alpine' b',' b'on' b'its' b'<unk>' b'as' b'they' b'are' b'colored' b','
    b'intensive' b'<unk>' b',' b'fuse' b'@-@' b'dominated' b',' b'<unk>' b'@-@' b'phosphate' b',' b'attack' b',' b'dogs' b',' b'fore' b',' b'white' b',' b'and'
    b'relative' b'distinctive' b'or' b'not' b'dramatically' b'.' b'Behind' b'large' b'invasions' b'make' b'their' b'length' b'as' b'red' b',' b'their' b'open' b'complexes' b'often' b'set'
    b'.' b'tetroxide' b'fall' b'down' b'shows' b'when' b'evolved' b'after' b'an' b'combination' b'of' b'can' b'lose' b'it' b'\xe2\x80\x94' b'with' b'many' b'each' b'female' b','
    b'one' b'of' b'it' b'staff' b'.' b'Things' b'reagents' b'begins' b'on' b'<unk>' b',' b'while' b'its' b'differentiation' b'will' b'be' b'derived' b'or' b'found' b'solely'
    b'.' b'and' b'they' b'are' b'rising' b'at' b'a' b'convict' b"'s" b'<unk>' b'can' b'be' b'down' b',' b'and' b'in' b'Show' b',' b'they' b'have'
    b'under' b'their' b'disc' b'into' b'ammonia' b'<unk>' b'.' b'Many' b'birds' b'enters' b'prey' b',' b'dress' b',' b'flattened' b',' b'and' b'Holsteyn' b'broadleaf' b'.'
    b'Sometimes' b'they' b'quietly' b'falls' b'into' b'35' b'%' b',' b'and' b'provoked' b'vested' b'by' b'roll' b'.' b'<eos>' b'Because' b'of' b'nesting' b',' b'they'
    b'feed' b'throughout' b'their' b'male' b'@-@' b'era' b'park' b'with' b'males' b'bulbs' b'A' b'eggs' b'who' b'invoked' b'when' b'<unk>' b'Hermann' b'sound' b'(' b'also'
    b'indigo' b'as' b'their' b'cell' b')' b'called' b'some' b'there' b'was' b'information' b'at' b'any' b'long' b'thing' b'or' b'leave' b'up' b'a' b'civilian' b'planet'
    b'.' b'There' b',' b'this' b'year' b'may' b'be' b'killed' b'.' b'A' b'female' b'start' b'is' b'more' b'difficult' b'for' b'Boulder' b'envelope' b'without' b'40'
    b'\xc2\xb0' b'birds' b'throughout' b'Europe' b'.' b'It' b'looks' b'on' b'both' b'minerals' b'and' b'wing' b'pattern' b'and' b'provide' b'females' b'all' b'.' b'Sometimes' b'Ernst'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 180.4
    loss: 5.168
    elapsed time (seconds): 105.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  54.257 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'patch' b':' b'Silver' b'or' b'Twenty' b'<unk>' b'.' b'To' b'his' b'next' b'Complete' b'button' b'and' b'a' b'civilian' b'patient' b',' b'At' b'the' b'least'
    b'days' b',' b'Jackson' b'was' b'also' b'considered' b',' b'ranging' b'at' b'malaria' b'to' b'Romania' b',' b'formally' b'found' b'having' b'personally' b'good' b'course' b'.'
    b'For' b'this' b'time' b',' b'Except' b'with' b'tales' b'from' b'black' b',' b'Rooster' b',' b'Encyclopedia' b',' b'ages' b',' b'or' b'African' b'Crash' b'leptophylla'
    b'Side' b'.' b'But' b'and' b'<unk>' b',' b'the' b'controversy' b'won' b'collective' b'minor' b'children' b',' b'initially' b'printed' b'.' b'A' b'traditional' b'survival' b'are'
    b'standing' b'alongside' b'harmonica' b'across' b'Ceres' b',' b'a' b'short' b'space' b'by' b'any' b'male' b'who' b'Ecuador' b'to' b'Bir' b'Willie' b'Crane' b'on' b'the'
    b'reverse' b';' b'it' b'is' b'a' b'Bohemond' b'der' b'coaster' b'on' b'the' b'mystery' b',' b'which' b'was' b'seen' b'live' b'to' b'add' b'an' b'prototype'
    b'to' b'it' b'a' b'invasion' b',' b'Mabillard' b',' b'depending' b'on' b'<unk>' b'heterosexual' b'.' b'Much' b'are' b'approximately' b'three' b'months' b'known' b'as' b'Blender'
    b"'s" b'population' b'of' b'their' b'"' b'<unk>' b'"' b',' b'which' b'will' b'have' b'"' b"'" b'naked' b'improved' b'"' b',' b'and' b'he' b'was'
    b'artifacts' b'to' b'indicate' b'Zhou' b'"' b'human' b'god' b'David' b'<unk>' b'"' b'for' b'a' b'under' b'@-@' b'turn' b'measures' b',' b'in' b'1829' b','
    b'based' b'in' b'highs' b'.' b'There' b'are' b'large' b'heavily' b'assembled' b'migration' b',' b'opt' b';' b'in' b'plants' b'such' b'as' b'the' b'<unk>' b'Cider'
    b'with' b'kinescopes' b'that' b'similar' b'to' b'its' b'alternate' b'virus' b',' b'that' b'is' b'based' b'on' b'him' b'.' b'There' b'are' b'reports' b'each' b'recognition'
    b'wear' b'contain' b'most' b'remaining' b'structural' b'ones' b',' b'open' b'bass' b',' b'incarnation' b',' b'federal' b'body' b',' b'low' b',' b'trees' b',' b'possessing'
    b'her' b'<unk>' b'Bhai' b'and' b'objected' b'to' b'the' b'Keyes' b'.' b'The' b'men' b'are' b'the' b'same' b'restless' b'properties' b'(' b'see' b'and' b')'
    b'none' b'to' b'stay' b'conditions' b'as' b'they' b'used' b'by' b'Yankovic' b'or' b'.' b'It' b'does' b'not' b'back' b'up' b'down' b'revolver' b'in' b'the'
    b'Kaimanawa' b'gangsters' b'<unk>' b'.' b'Under' b'water' b',' b'Ireland' b'allow' b'tension' b',' b'a' b'body' b'that' b'forms' b'instance' b'what' b'may' b'leave' b'today'
    b'.' b'<eos>' b'<unk>' b',' b'high' b',' b'and' b'pores' b',' b'may' b'be' b'contain' b'suffering' b'by' b'weeds' b'or' b'<unk>' b',' b'makes' b'them'
    b'to' b'<unk>' b',' b'Stadium' b',' b'Guinea' b'(' b'Mycologist' b'slice' b')' b',' b'<unk>' b',' b'<unk>' b',' b'or' b'physique' b'sun' b'pores' b','
    b'folklore' b'(' b'across' b'example' b'Shiva' b'131' b'.' b'For' b'example' b',' b'faster' b'females' b')' b'resulted' b'in' b'water' b',' b'and' b'may' b'be'
    b'displayed' b'a' b'variety' b'of' b'halt' b'.' b'Several' b'other' b'ashlar' b'attempts' b',' b'Mercado' b',' b'and' b'Eubanks' b'.' b'The' b'church' b'kitsune' b'refers'
    b'to' b'negotiate' b'interests' b'on' b'possible' b'<unk>' b',' b'but' b'onshore' b'their' b'ability' b'spring' b'to' b'cause' b'34' b'%' b'Andrews' b',' b'while' b'it'
    b'can' b'be' b',' b'and' b'is' b'more' b'Eugenia' b'.' b'Moving' b'may' b'be' b'responsible' b'between' b'common' b'birds' b'and' b'<unk>' b'\xe2\x80\x94' b'biological' b','
    b'single' b',' b'and' b'durable' b'.' b'The' b'eggs' b'Ross' b'communications' b'it' b'for' b'their' b'auto' b'job' b';' b'the' b'food' b'<unk>' b'concealment' b'to'
    b'help' b'other' b'chicks' b'at' b'that' b'curved' b'when' b'they' b'are' b'affixed' b'.' b'Instead' b',' b'they' b'continue' b'to' b'escape' b'their' b'size' b'was'
    b'to' b'cause' b'Mr' b'hadrosaurs' b'for' b'such' b'third' b'but' b'tips' b'to' b'whether' b'Ljubinje' b'alone' b'.' b'The' b'male' b'refers' b'to' b'basic' b'populations'
    b'of' b'dense' b'@-@' b'abdomen' b',' b'although' b'some' b'fewer' b'of' b'these' b'cu' b'children' b'may' b'be' b'made' b'.' b'As' b'much' b'compared' b'to'
    b'a' b'dark' b'complexes' b'on' b'about' b'5' b'million' b'birds' b',' b'it' b'occurs' b'so' b'fingering' b',' b'they' b'carving' b',' b'lodgepole' b',' b'pinkish'
    b',' b'magnitude' b'.' b'Since' b'they' b'are' b'qualified' b'of' b'up' b'a' b'special' b'variety' b'of' b'Chandra' b'does' b'an' b'span' b'to' b'age' b'.'
    b'Males' b'require' b'high' b'starlings' b'and' b'6' b'juveniles' b'.' b'Once' b'tend' b'to' b'have' b'mechanical' b'fluid' b',' b'they' b'contends' b'snakes' b';' b'for'
    b'example' b',' b'it' b'was' b'probably' b'disappear' b'.' b'His' b'older' b'basidia' b'is' b'recycled' b'by' b'English' b'flock' b'that' b'they' b'appears' b'from' b'the'
    b'projection' b'of' b'<unk>' b',' b'and' b'it' b'can' b'be' b'pronounced' b'up' b'flowers' b'whose' b'heroes' b'fulfill' b'or' b'bind' b'for' b'Leppard' b'.' b'The'
    b'common' b'starling' b'of' b'these' b'birds' b'include' b'entire' b'foods' b',' b'and' b'some' b'<unk>' b'taxa' b'Sergeant' b'M.' b'Gilmour' b'retired' b'.' b'Other' b'areas'
    b'occur' b'as' b'naked' b'as' b'<unk>' b'that' b'shut' b'with' b'missing' b'arrest' b',' b'when' b'they' b'purification' b'on' b'milk' b'engineering' b'.' b'Hermann' b'galericulata'
    b',' b'on' b'heavens' b',' b'can' b'be' b'placed' b'to' b'eat' b'each' b'may' b'enter' b'or' b'Give' b'kakapo' b',' b'often' b'consider' b':' b'one'
    b'@-@' b'or' b'@-@' b'beating' b'pests' b'such' b'as' b'invertebrates' b',' b'reagents' b'and' b'caesarea' b'on' b'common' b'gill' b',' b'damaging' b'structural' b'spots' b','
    b'which' b'understand' b'the' b'wild' b'.' b'The' b'introduction' b'of' b'Hairan' b'trillion' b'appears' b'to' b'be' b'driven' b'by' b'the' b'<unk>' b'Newly' b'imagery' b'of'
    b'<unk>' b',' b'promote' b'rigor' b'and' b'shrubs' b'.' b'They' b'produced' b'more' b'rounded' b'populations' b'from' b'his' b'RNA' b',' b'and' b'are' b'it' b"'s"
    b'better' b'small' b'numbers' b':' b'<eos>' b'close' b'with' b'real' b'legal' b'frame' b',' b'vibrant' b',' b'muscimol' b'and' b'environment' b',' b'may' b'accumulate' b'to'
    b'the' b'descriptions' b'of' b'some' b'<unk>' b',' b'and' b'bordering' b'an' b'fluctuated' b'or' b'proven' b'pursuers' b'for' b'when' b'they' b'are' b'all' b'choosing' b'away'
    b'of' b'<unk>' b'.' b'IV' b'will' b'pull' b'to' b'explain' b'off' b'the' b'Iberia' b',' b'where' b'recording' b';' b'they' b'have' b'a' b'lasting' b'spouting'
    b',' b'and' b'its' b'<unk>' b'would' b'not' b'try' b'as' b'a' b'male' b',' b'the' b'head' b'by' b'her' b'<unk>' b'when' b'the' b'couple' b'are'
    b'<unk>' b'back' b'to' b'South' b'Australia' b'.' b'If' b'they' b'in' b'the' b'exactly' b',' b'hadrosaurids' b'intersects' b'a' b'speed' b'of' b'Rhodes' b'that' b'they'
    b'typically' b'discuss' b'<unk>' b'<unk>' b'signals' b'it' b'.' b'Both' b'common' b'sex' b'images' b'have' b'only' b'recovered' b'calls' b'within' b'orchards' b'ahead' b',' b'and'
    b'equip' b'them' b'to' b'limit' b'all' b'towards' b'large' b'lines' b',' b'and' b'pain' b'designed' b'admire' b'ignore' b'bound' b'agnostic' b'when' b'they' b'were' b'relate'
    b'.' b'Holdings' b'may' b'cause' b'Kenneth' b'headman' b"'s" b'areas' b'and' b'factories' b'that' b'reason' b'to' b'escape' b'.' b'"' b'yeast' b'may' b'see' b'growing'
    b'in' b'human' b'fields' b',' b'this' b'is' b'rarely' b'fed' b'by' b'fine' b'@-@' b'rich' b',' b'while' b'an' b'trough' b'colony' b'is' b'likely' b'so'
    b'potent' b'.' b'It' b'is' b'very' b'significant' b'form' b',' b'less' b'than' b'three' b'times' b':' b'Havilland' b'have' b'much' b'cycles' b',' b'and' b'long'
    b'unusually' b'linguists' b',' b'so' b'it' b'or' b'produce' b',' b'thirty' b'moments' b'is' b'only' b'<unk>' b'.' b'You' b'has' b'13' b'more' b'deprecating' b'shades'
    b'and' b'a' b'female' b'broods' b'.' b'Events' b'on' b'the' b'anal' b'slopes' b'of' b'water' b',' b'mistakes' b',' b'can' b'use' b'more' b'for' b'have'
    b'1' b'metres' b'(' b'4' b'ft' b')' b'and' b'makes' b'to' b'banks' b',' b'so' b'is' b'litter' b'.' b'Eventually' b',' b'animal' b'air' b'behaviour'
    b',' b'by' b'females' b',' b'improvise' b'and' b'order' b',' b'may' b'be' b'a' b'migratory' b'vigorously' b'.' b'Many' b'researchers' b'indolence' b'bird' b',' b'or'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 201.2
    loss: 5.168
    elapsed time (seconds): 117.7




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  28.152 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

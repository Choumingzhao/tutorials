
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'in' b'welfare' b',' b'resulting' b'in' b'the' b'US' b'of' b'the' b'bow' b'who' b'stated' b'a' b'"' b'two' b'to' b'her' b'<unk>' b'for'
    b'these' b'and' b'half' b'.' b'...' b'They' b'fade' b'almost' b'before' b'or' b'I' b'will' b'effectively' b'have' b'written' b'or' b'to' b'scale' b'.' b'"'
    b'The' b'convict' b'indicated' b'that' b'accented' b'Christian' b'Husband' b'<unk>' b'Potentials' b'caused' b'operating' b'observations' b'.' b'As' b'part' b'of' b'the' b'sports' b'else' b'are'
    b'unknown' b'of' b'her' b'vocal' b'militaries' b',' b'their' b'name' b'becomes' b'rare' b'parts' b'of' b'the' b'sort' b'of' b'hygroscopic' b',' b'a' b'pipeline' b'allegedly'
    b'and' b'killing' b'into' b'owned' b'Mars' b'.' b'The' b'Guerrero' b'Plant' b'68' b'nm' b'has' b'the' b'same' b'depot' b'on' b'the' b'ground' b'relative' b'and'
    b'both' b'a' b'predictions' b',' b'and' b'other' b'simultaneously' b'finger' b'have' b'done' b'since' b'the' b'Whole' b'States' b'Jewell' b'.' b'On' b'Cambridge' b"'s" b'editorial'
    b',' b'<unk>' b'is' b'decorated' b'from' b'Japan' b'(' b'Lancashire' b',' b'Macrianus' b')' b',' b'which' b'is' b'probably' b'a' b'flanked' b'flank' b'of' b'Venus'
    b'.' b'The' b'tone' b'of' b'his' b'female' b'Sun' b'fined' b'boys' b'too' b'short' b'[' b'he' b'is' b'with' b'belonging' b'to' b'its' b'father' b"'s"
    b'fiction' b'.' b'1814' b'was' b'then' b'devastated' b',' b'when' b'he' b'suggested' b'of' b'as' b'it' b'Mean' b'grammar' b',' b'coming' b'to' b'abuse' b','
    b'invented' b'"' b'big' b'Trujillo' b'"' b'.' b'Computer' b'Catholicism' b',' b'a' b'book' b'@-@' b'expression' b'such' b'as' b'Dick' b'Kellman' b',' b'was' b'noted'
    b'that' b'"' b'the' b'best' b'@-@' b'ever' b'start' b'Ross' b'don' b"'t" b'act' b'or' b'take' b'up' b'<unk>' b'specifically' b'parents' b',' b"'" b'Dark'
    b'pity' b'.' b'"' b'Mosley' b'soon' b'noted' b'"' b'this' b'planet' b'are' b'a' b'bit' b'ever' b'time' b',' b'Trial' b'that' b'lay' b'more' b'crucial'
    b'and' b'you' b'is' b'biological' b'the' b'ice' b'Jr' b'.' b'"' b'Consequently' b',' b'when' b'Eguchi' b'found' b'only' b'or' b'386' b'even' b'<unk>' b'as'
    b'the' b'best' b'destruction' b'Membrane' b'poem' b'or' b'its' b'Bearded' b'alterations' b',' b'"' b'<unk>' b'<unk>' b'"' b'had' b'targeted' b'much' b'of' b'the' b'main'
    b'feminist' b'quality' b'in' b'keeping' b'of' b'part' b'who' b'he' b'did' b'not' b'give' b'or' b';' b'his' b'other' b'old' b'measures' b'known' b'as' b'making'
    b'by' b'lovers' b'from' b'their' b'kind' b',' b'his' b'suggestion' b'claimed' b'it' b'seems' b'.' b'In' b'Victor' b'Ross' b'rescued' b'chance' b',' b'relative' b','
    b'thick' b'and' b'combined' b'.' b'flute' b'personally' b'making' b'some' b'were' b'very' b'fielded' b',' b'though' b'was' b'sent' b'to' b'visit' b'small' b'shoulder' b'ways'
    b'.' b'In' b'his' b'flight' b'the' b'U\xc3\xad' b'Age' b'analyze' b'from' b'<unk>' b'Marjory' b'Kennedy' b'The' b'virtuoso' b'<unk>' b'of' b'a' b'exhibition' b'held' b'of'
    b'100' b'component' b'being' b'at' b'<unk>' b'"' b'By' b'a' b'Age' b'"' b'(' b'NPR' b')' b'.' b'The' b'song' b'may' b'be' b'attributed' b'to'
    b'New' b'Zealand' b',' b'and' b'claims' b'that' b'they' b'are' b'rehabilitated' b',' b'agreeing' b',' b'and' b'decks' b'to' b'keep' b'those' b'additional' b'conditions' b'.'
    b'thinking' b'said' b'that' b'"' b'we' b'can' b'not' b'speak' b',' b'because' b'it' b'is' b'definitely' b'strangle' b',' b'lost' b',' b'Walpole' b',' b'in'
    b'Los' b'Angeles' b',' b'liked' b'to' b'win' b'a' b'45' b'@-@' b'minute' b'model' b'for' b'thought' b'has' b'warrant' b'.' b'"' b'When' b'each' b'factors'
    b'connections' b'less' b'of' b'his' b'characters' b'during' b'the' b'<unk>' b'area' b'.' b'Another' b'epithet' b'kneeling' b'Like' b'The' b'applying' b'player' b'under' b'even' b'by'
    b'tension' b'people' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Rachel' b'for' b'Civil' b'War' b'II' b'=' b'=' b'<eos>' b'<eos>' b'The' b'character' b'of' b'Carre'
    b"'s" b'recordings' b';' b'believed' b'that' b'skilled' b'artists' b'found' b'interest' b'to' b'Ceres' b'including' b'Australia' b'in' b'California' b'and' b'was' b'connected' b'to' b'bone'
    b'agonistic' b'strategy' b'in' b'Oasis' b'.' b'Muldaur' b'also' b'emphasised' b'visitors' b',' b'especially' b'in' b'1988' b';' b'by' b'Okinawa' b'the' b'site' b'had' b'already'
    b'increased' b'his' b'intention' b':' b'James' b'distinctive' b'is' b'part' b'of' b'her' b'capital' b',' b'and' b'headed' b'Doyle' b'in' b'Philadelphia' b'.' b'In' b'his'
    b'absence' b'whenever' b'they' b'applied' b'items' b'to' b'him' b',' b'meaning' b'only' b'pregnancy' b"'s" b';' b'he' b'fights' b'to' b'Broncos' b'with' b'the' b'male'
    b"'s" b'history' b'in' b'season' b'physics' b'.' b'Mann' b'eventually' b'displayed' b'to' b'Blue' b'Australia' b'(' b'1632' b')' b'.' b'Credits' b'Mah\xc3\xa9' b'(' b'<unk>'
    b')' b'described' b'the' b'project' b"'s" b'dressing' b'during' b'some' b'of' b'them' b',' b'who' b'does' b'not' b'Magdalen' b'soul' b'all' b'on' b'how' b'<unk>'
    b'.' b'He' b',' b'identified' b'by' b'appropriate' b'geographer' b'Sgitheanach' b'(' b'the' b'<unk>' b'Garuda' b'\xe2\x80\x94' b'ordered' b'an' b'will' b'in' b'readiness' b')' b'rose'
    b'into' b'a' b'icon' b',' b'but' b'after' b'conveys' b'the' b'marriage' b'just' b'.' b'<eos>' b'The' b'writer' b'enables' b'most' b'zoologist' b'Brown' b'Cd' b'4'
    b':' b'5' b'(' b'2001' b')' b',' b'frigate' b',' b'had' b'light' b'@-@' b'scientist' b'6' b'%' b'of' b'15' b'points' b'.' b'The' b'writings'
    b'of' b'the' b'flower' b'(' b'The' b'Swamp' b'clock' b')' b',' b'a' b'distinctive' b'intelligentsia' b'said' b':' b'"' b'She' b'picked' b'up' b'clock' b'has'
    b'a' b'finest' b'stalk' b'just' b'too' b'.' b'It' b'is' b'a' b'indication' b'to' b'have' b'<unk>' b'100' b'and' b'spiny' b'who' b'are' b'fun' b'.'
    b'Then' b'to' b',' b'and' b'have' b'belonged' b'to' b'well' b'Cheyenne' b',' b'you' b'is' b'saying' b'to' b'go' b'from' b'the' b'crime' b'back' b'.'
    b"'" b'Happy' b'torch' b'Movement' b'is' b'not' b'regurgitated' b'on' b'development' b'in' b'2nd' b'America' b'.' b'We' b'tell' b'our' b'impressive' b'voice' b'.' b'"'
    b'The' b'phone' b'produces' b'a' b'kick' b'against' b'harvest' b'expression' b',' b'which' b'could' b'be' b'short' b'and' b'way' b'of' b'sure' b',' b'who' b'also'
    b'asked' b'Ecclestone' b'or' b'often' b'be' b'on' b'June' b'31' b',' b'scoring' b'in' b'<unk>' b',' b'Girl' b'Center' b'(' b'1976' b')' b'All' b'.'
    b'The' b'previous' b'attempt' b',' b'"' b'ordering' b'a' b'leading' b'aesthetics' b'of' b'[' b'all' b']' b'thirds' b'had' b'some' b'cladistic' b'worried' b'rather' b'than'
    b'history' b'.' b'"' b'<unk>' b'he' b'wrote' b'to' b'have' b'"' b'used' b'trouble' b'worst' b',' b'good' b',' b'the' b'partial' b'marriages' b'for' b'people'
    b'or' b'catch' b',' b'also' b'aims' b'to' b'become' b'quite' b"'" b'Caulkins' b'to' b'see' b"'" b'I' b'do' b'remove' b'the' b'next' b'core' b'and'
    b'does' b'ever' b'be' b'diseases' b'.' b'"' b'After' b'iOS' b'claims' b'that' b'a' b'two' b'@-@' b'sprawling' b'movie' b',' b'Formula' b"'Malley" b'"' b'likewise'
    b'ends' b'his' b'followers' b'I' b'might' b'try' b'to' b'do' b'.' b'"' b'<eos>' b'Ceres' b'in' b'Chains' b"'" b'works' b'as' b'and' b'policy' b'that'
    b'the' b'wives' b'settled' b'to' b'the' b'lover' b',' b'Leon' b'<unk>' b',' b'was' b'once' b'"' b'oak' b'"' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'FISA' b'=' b'=' b'<eos>' b'<eos>' b'Aside' b'for' b'the' b'injured' b'season' b'in' b'the' b'dismay' b'of' b'Flower' b'(' b'who' b'had' b'previously' b'been'
    b'believed' b'to' b'be' b'particularly' b'spelled' b'as' b'a' b'essays' b'of' b'falling' b'reform' b'other' b'grain' b'years' b',' b'as' b'it' b'is' b'6' b'months'
    b'for' b'their' b'<unk>' b')' b'.' b'Jenna' b'Quiney' b'is' b'"' b'unlike' b'another' b'mistake' b'officers' b'at' b'God' b',' b'and' b'the' b'discussion' b'of'
    b'broad' b'Morrison' b'.' b'"' b'The' b'groom' b'about' b'contact' b'on' b'a' b'fans' b'can' b'be' b'scaled' b'to' b'be' b'tentatively' b'in' b'his' b'letters'
    b'.' b'In' b'the' b'case' b'of' b'Walker' b',' b'women' b'for' b'their' b'dedication' b'where' b'it' b'moves' b',' b'"' b'<unk>' b'great' b'and' b'medium'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 180.0
    loss: 5.168
    elapsed time (seconds): 106.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  55.415 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

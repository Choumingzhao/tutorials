
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'headed' b'by' b'<unk>' b'to' b'speak' b'a' b'hockey' b'degree' b'using' b'it' b'and' b'Su' b'.' b'However' b',' b'Rugby' b'title' b'segments' b'in'
    b'NBA' b'areas' b',' b'some' b'neural' b'Jews' b',' b'<unk>' b',' b'speculations' b',' b'<unk>' b',' b'blending' b'and' b'water' b'have' b'Pagliacci' b'their' b'worries'
    b'.' b'An' b'choice' b'of' b'gameplay' b'is' b'fine' b'on' b'Syria' b';' b'with' b'other' b'birds' b'seen' b'on' b'a' b'kakapo' b'mechanisms' b',' b'close'
    b'to' b'Palmyrenes' b'chromosome' b',' b'Spotnitz' b'that' b'proclaimed' b'cloth' b'around' b'<unk>' b',' b'and' b'was' b'threads' b'as' b'stating' b'to' b'be' b'heard' b'under'
    b'both' b'his' b'injury' b'further' b'.' b'The' b'species' b'for' b'Gordon' b"'" b'<unk>' b',' b'Bennett' b',' b'and' b'Tracy' b'@-@' b'Boom' b',' b'The'
    b'task' b'of' b'reaction' b',' b'prevented' b'it' b'back' b'to' b'<unk>' b"'" b'<unk>' b'are' b'aimed' b'.' b'They' b'was' b'available' b'to' b'matrix' b'their'
    b'diameter' b'that' b'this' b'is' b'themselves' b'to' b'be' b'extinct' b'the' b'focus' b'between' b'Brest' b'and' b'pink' b'.' b'The' b'criteria' b'have' b'led' b'to'
    b'an' b'large' b'view' b',' b'in' b'abducts' b',' b'number' b'looks' b'in' b'vignettes' b'drought' b',' b'providing' b'to' b'only' b'at' b'least' b'three' b'regular'
    b'blow' b'.' b'Similarly' b',' b'on' b':' b'24' b'%' b'as' b'other' b'sexpunctatus' b',' b'there' b'is' b'two' b'more' b'common' b'aspects' b',' b'who'
    b'defining' b',' b'though' b'dark' b'in' b'curfew' b'people' b'occurred' b'at' b'clusters' b'through' b'just' b'a' b'period' b'.' b'There' b'is' b'some' b'jumping' b'reports'
    b'(' b'offering' b'on' b'the' b'16th' b'@-@' b'century' b')' b',' b'which' b'and' b'reputed' b'Herman' b'shrunk' b'for' b'another' b'other' b'one' b'continuous' b'children'
    b'(' b'spelled' b'the' b'factors' b')' b',' b'Protestants' b'qualities' b'\xe2\x80\x94' b'is' b'up' b'to' b'function' b',' b'from' b'which' b'they' b'at' b'least' b'.'
    b'The' b'adults' b'involve' b'birds' b'are' b'illegal' b',' b'Rover' b',' b'reinforcement' b',' b'ultraviolet' b',' b'beast' b',' b'aggressively' b',' b'creating' b'subtle' b'less'
    b'male' b'approach' b'as' b'<unk>' b'sung' b'.' b'This' b'herbivores' b'seductress' b'eastern' b'of' b'their' b'vegetation' b'three' b'years' b'.' b'The' b'unusual' b'skeleton' b'does'
    b'not' b'have' b'a' b'small' b'process' b'to' b'ruined' b'random' b'stem' b',' b'and' b'by' b'her' b'death' b'rhythmic' b'premaxilla' b'mammals' b'may' b'be' b'made'
    b'to' b'presentation' b'with' b'player' b'or' b'uneven' b'them' b'.' b'Our' b'corona' b'says' b'<unk>' b',' b'and' b'by' b'my' b'book' b'of' b'destroying' b'the'
    b'Viscount' b'standing' b',' b'which' b'touch' b'roughly' b'10' b'or' b'16' b':' b'acid' b'with' b'the' b'eggs' b'.' b'An' b'diet' b'(' b'WYO' b'changes'
    b')' b'sing' b'the' b'grey' b'@-@' b'associate' b',' b'which' b'do' b'a' b'high' b'distance' b'or' b'8' b'years' b'.' b'There' b'are' b'generally' b'evidence'
    b'of' b'the' b'kakapo' b',' b'however' b',' b'two' b'or' b'four' b'or' b'more' b'<unk>' b'populations' b',' b'are' b'written' b'by' b'eyes' b'and' b'flight'
    b'between' b',' b'which' b'are' b'<unk>' b'.' b'Once' b'not' b'a' b'combination' b'of' b'<unk>' b'her' b'conception' b',' b'bearings' b'survives' b'will' b'be' b'easy'
    b',' b'describing' b'his' b'opus' b'beak' b',' b'so' b'relates' b'when' b'they' b'are' b'often' b'chestnut' b'.' b'Kitsunetsuki' b'attributes' b'the' b'decline' b'of' b'certain'
    b'any' b'of' b'Ceres' b'and' b'confess' b'their' b'conception' b',' b'hard' b'hand' b'although' b'attacking' b',' b'as' b'they' b'are' b'contrary' b'to' b'ways' b','
    b'easy' b'whereas' b'feeding' b'up' b'.' b'It' b'has' b'distinct' b'involvement' b'very' b'other' b',' b'along' b'with' b'other' b'sources' b',' b'with' b'a' b'dull'
    b'angle' b'.' b'When' b'exposed' b'into' b'the' b'toxicity' b'that' b'they' b'are' b'scattered' b'as' b'they' b'may' b'pull' b'in' b'out' b'of' b'any' b'male'
    b'birds' b',' b'it' b'throughout' b'the' b'years' b',' b'then' b'4' b'@.@' b'6' b'years' b',' b'each' b'of' b'which' b'are' b'useful' b'before' b'171'
    b'.' b'2' b'to' b'18' b'years' b',' b'up' b'out' b'a' b'female' b'excited' b'belonging' b'to' b'male' b',' b'which' b'do' b'not' b'encourage' b'trauma'
    b'on' b'one' b'side' b'of' b'engaging' b'.' b'The' b'scales' b'are' b'normally' b'affected' b'by' b'each' b'pair' b'of' b'spectrum' b'but' b'some' b'pairs' b'have'
    b'in' b'the' b'trivial' b'.' b'The' b'only' b'mention' b'depicts' b',' b'to' b'be' b'undeveloped' b'opposes' b',' b'will' b'prefer' b'<unk>' b'intermediate' b'coerced' b'with'
    b'the' b'surface' b'spread' b'to' b'either' b'allowing' b'starlings' b'grant' b'when' b'somewhat' b'other' b'LEDs' b'were' b'paving' b'in' b'that' b'of' b'less' b'walled' b'size'
    b'@-@' b'shaped' b'behaviour' b'.' b'The' b'best' b'common' b'plumage' b'of' b'<unk>' b'brass' b'to' b'produce' b'internally' b',' b'carefully' b',' b'egg' b',' b'sub'
    b'@-@' b'iodine' b',' b'dust' b'voltage' b',' b'<unk>' b',' b'and' b'culvert' b';' b'thin' b'by' b'<unk>' b'hall' b'.' b'Such' b'humans' b'call' b'ratios'
    b',' b'usually' b'are' b'caused' b'by' b'expose' b'they' b'are' b'swept' b'in' b'1982' b'.' b'Within' b'example' b',' b'however' b',' b'it' b'created' b'them'
    b'with' b'well' b'<unk>' b',' b'so' b'some' b'possible' b'male' b'accounts' b'can' b'occur' b'vector' b'or' b'<unk>' b'flowers' b'.' b'As' b'this' b'call' b'directly'
    b'limits' b'of' b'feeding' b',' b'they' b'are' b'typically' b'exposed' b'to' b'<unk>' b'in' b'spaces' b',' b'which' b'can' b'be' b'calculated' b'to' b'be' b'<unk>'
    b'through' b'as' b',' b'when' b'their' b'anger' b'chip' b',' b'anywhere' b'they' b'put' b'.' b'A' b'straight' b'high' b'reason' b'that' b'mammals' b',' b'when'
    b'gravitational' b',' b'usually' b'arrive' b'over' b'some' b'smaller' b'tissues' b'are' b'differentiated' b',' b'as' b'they' b'are' b'noted' b'as' b'hatching' b'.' b'In' b'late'
    b'2014' b',' b'<unk>' b'spinal' b'calls' b'became' b'consistent' b'.' b'These' b'studies' b'eat' b'<unk>' b'and' b'Qedar' b',' b'stalk' b',' b'Gavin' b'mice' b'and'
    b'Kaiser' b'chicks' b'.' b'A' b'stabilized' b'distinctive' b',' b'for' b'example' b'was' b'commended' b'with' b'a' b'average' b'human' b'roof' b'of' b'homes' b'to' b'the'
    b'food' b',' b'which' b'may' b'come' b'to' b'St' b'jimmadseni' b'.' b'The' b'eggs' b'documented' b'"' b'Odaenathus' b'"' b',' b'action' b'of' b'columns' b'.'
    b'In' b'direct' b'areas' b',' b'only' b'there' b'will' b'take' b'the' b'back' b'of' b'Osiris' b'.' b'consorts' b'may' b'be' b'used' b'as' b'Ark' b'Allah'
    b',' b'forcing' b'characteristic' b'when' b'they' b'transmitted' b'which' b'their' b'feathers' b'are' b'likely' b'.' b'<eos>' b'A' b'bird' b'carving' b',' b'elliptical' b',' b'vanished'
    b'horror' b',' b'is' b'usually' b'fine' b'.' b'<eos>' b'The' b'nuclear' b'World' b'sequence' b'is' b'in' b'provide' b'a' b'wide' b'<unk>' b'ability' b'with' b'eggs'
    b'.' b'In' b'unfounded' b'woodland' b',' b'it' b'is' b'crushed' b'by' b'seasonal' b',' b'and' b'to' b'maintain' b'other' b'bouts' b'of' b'prey' b'and' b'the'
    b'cheese' b'.' b'He' b'grows' b'for' b'females' b'to' b'precious' b',' b'with' b'home' b'or' b'shipments' b'that' b'are' b'weird' b'in' b'what' b'may' b'be'
    b'exactly' b'taxa' b'+' b'possibly' b'that' b'may' b'influence' b'higher' b'mineral' b'blocks' b'.' b'One' b'other' b'training' b'calls' b'by' b'bone' b'and' b'restore' b'branched'
    b'methods' b'swell' b'are' b'written' b'.' b'As' b'the' b'night' b'primarily' b'successfully' b'the' b'white' b'brown' b'jackrabbit' b'calls' b',' b'they' b'evolved' b'the' b'south'
    b'.' b'If' b'they' b'face' b'mimicked' b',' b'he' b'feed' b'by' b'gills' b'and' b'almost' b'in' b'succession' b'such' b'as' b',' b'offering' b'<unk>' b','
    b'improve' b'and' b'<unk>' b'.' b'Thoth' b'planned' b'forward' b'to' b'<unk>' b',' b'those' b'a' b'report' b',' b'and' b'says' b'that' b'it' b'descends' b'from'
    b'two' b'areas' b'.' b'She' b'also' b'Islanders' b'as' b'being' b'the' b'two' b'feathers' b';' b'rural' b'fewer' b'carries' b'concerns' b'of' b'question' b'during' b'they'
    b'vary' b',' b'but' b'and' b'fewer' b'molecules' b'may' b'originally' b'be' b'understood' b'to' b'be' b'made' b'.' b'Other' b'factory' b'are' b'common' b'them' b'to'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 178.6
    loss: 5.168
    elapsed time (seconds): 104.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  51.486 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

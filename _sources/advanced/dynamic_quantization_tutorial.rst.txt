
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'it' b'.' b'In' b'Jeremy' b'Lindsay' b"'s" b'breaker' b',' b'it' b'was' b'put' b'in' b'direction' b'of' b'his' b'early' b'town' b'.' b'<eos>' b'Inside'
    b'his' b'final' b'extraterrestrial' b'campaign' b',' b'Total' b'Magazine' b'tow' b'was' b'pursued' b'by' b'the' b'National' b'Glamorgan' b'Presidential' b'primary' b',' b'Continental' b'capital' b','
    b'and' b'the' b'greatest' b'boat' b'in' b'Amiga' b'Day' b'.' b'The' b'Frenchmen' b'will' b'become' b'simple' b'in' b'the' b'country' b'\xe2\x80\x93' b'pressed' b'in' b'the'
    b'Trinity' b'Department' b'of' b'Fame' b',' b'<unk>' b'E' b'from' b'2009' b'.' b'<eos>' b'Ichiro' b'suggested' b'with' b'two' b'homes' b'the' b'kakapo' b'to' b'have'
    b'applied' b'at' b'the' b'rebellion' b',' b'ahead' b'of' b'reckoning' b'of' b'pro' b'@-@' b'date' b'to' b'make' b'its' b'final' b'new' b'journey' b'over' b'the'
    b'gap' b'.' b'Once' b'because' b'this' b'year' b',' b'they' b'felt' b'that' b'tournaments' b'in' b'their' b'theatrical' b'world' b'are' b'not' b'a' b'combination' b'of'
    b'numbers' b',' b'notoriously' b'overcome' b'at' b'a' b'CPHC' b'and' b'transported' b'homeworld' b'.' b'Both' b',' b'two' b'sic' b'or' b'other' b'populous' b'story' b','
    b'is' b'less' b'made' b'.' b'It' b'peaked' b'on' b'a' b'later' b'@-@' b'final' b'series' b'of' b'150' b'%' b'of' b'the' b'50' b'@,@' b'000'
    b'viewers' b',' b'two' b'agarics' b'such' b'as' b'<unk>' b'Castle' b',' b'the' b'cellular' b'botanist' b'Talk' b'Schmidt' b',' b'<unk>' b'tunnels' b'(' b'1978' b')'
    b',' b'and' b'Alex' b'laser' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legacy' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Tigers' b'of' b'the' b'merger' b'of'
    b'Dublin' b'is' b'nocturnal' b',' b'but' b'several' b'museums' b'were' b'supposed' b'-' b'meal' b'or' b'Manufactured' b'the' b'island' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Background' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Anglican' b'starling' b'volunteered' b'up' b'the' b'city' b'to' b'several' b'counter' b'or' b'working' b'potential' b'areas' b'.'
    b'It' b'also' b'represent' b'CPHC' b'around' b'open' b'events' b',' b'in' b'particular' b'.' b'According' b'to' b'HitFix' b'snap' b'their' b'design' b',' b'a' b'evil'
    b'speaker' b'held' b'a' b'number' b'of' b'women' b'that' b'are' b'possible' b'into' b'the' b'birds' b'.' b'There' b'were' b'not' b'stone' b'beneficial' b'on' b'a'
    b'farm' b',' b'a' b'Das' b'virus' b'which' b'Crash' b'W.' b'Stevens' b'declared' b'several' b'species' b'of' b'Rest' b'territory' b',' b'North' b'word' b',' b'marine'
    b'<unk>' b',' b'protein' b',' b'<unk>' b',' b'Denmark' b',' b'and' b'Irish' b'south' b',' b'opening' b'Australia' b'in' b'1829' b',' b'and' b'legal' b'activity'
    b'.' b'Although' b'pathology' b',' b'indigenous' b'components' b'have' b'apparently' b'significantly' b'observed' b'in' b'1203' b',' b'with' b'three' b'motor' b'scent' b'.' b'Wisden' b'fossils'
    b'<unk>' b'precipitation' b'of' b'Brethren' b'to' b'horse' b'soil' b',' b'and' b'their' b'flight' b'inventory' b',' b'evolutionary' b'as' b'food' b'provide' b'near' b'cooperation' b'.'
    b'They' b'also' b'comprise' b'manufacturing' b'access' b'to' b'conservation' b',' b'formerly' b'to' b'be' b'heavily' b'migratory' b',' b'Asked' b'to' b'a' b'bonus' b'around' b'Alongside'
    b'the' b'planets' b'including' b'users' b'such' b'as' b'a' b'short' b'mount' b'of' b'Catholicism' b'including' b'<unk>' b'waterway' b'and' b'multitude' b'.' b'Despite' b'regard' b'in'
    b'1987' b',' b'kakapo' b',' b'amphibious' b'volunteers' b',' b'<unk>' b'is' b'open' b'to' b'provincial' b'nestlings' b'.' b'Early' b'resulted' b'with' b'removes' b'kings' b','
    b'they' b'spread' b'to' b'Knafel' b'the' b'vehicle' b'near' b'sea' b',' b'whereas' b'they' b'is' b'<unk>' b'as' b'compared' b'to' b'fine' b'hemmemas' b'.' b'As'
    b'over' b'large' b'sporting' b'associated' b',' b'due' b'to' b'4' b'or' b'11' b'@.@' b'62' b'km' b'/' b'h' b'from' b'around' b'1' b'@,@' b'000'
    b',' b'the' b'same' b'2' b'million' b'birds' b'reported' b'it' b'may' b'be' b'considered' b'to' b'engage' b'off' b'.' b'<eos>' b'Beginning' b'under' b'especially' b'Crystal'
    b'size' b',' b'lbw' b'circles' b'occur' b'by' b'their' b'life' b',' b'without' b'businesses' b'of' b'their' b'breeding' b'arrangement' b',' b'chromosome' b'monsters' b',' b'which'
    b'were' b'then' b'written' b'by' b'counterproductive' b'areas' b'.' b'Males' b'abundant' b'sexually' b'those' b'\xe2\x80\x93' b'largest' b',' b'but' b'it' b'may' b'be' b'affected' b'by'
    b'each' b'wider' b'body' b',' b'as' b'a' b'field' b'specially' b'followed' b'to' b'a' b'average' b'.' b'Each' b'combined' b'finger' b'may' b'have' b'accepted' b'around'
    b'40' b'million' b'.' b'Thus' b',' b'the' b'kakapo' b'greater' b'plan' b'is' b'so' b'very' b'children' b'until' b'of' b'February' b'23' b',' b'1974' b','
    b'carpet' b',' b'Ireland' b',' b'Sweden' b'and' b'Naples' b';' b'it' b'does' b'not' b'have' b'tentative' b'species' b'due' b'.' b'<eos>' b'On' b'30' b'June'
    b'2016' b',' b'the' b'American' b'G\xc3\xb3mez' b'planet' b'established' b'another' b'first' b'species' b'of' b'competition' b'.' b'Irish' b'species' b'have' b'Chagas' b'encounters' b',' b'Ancestry'
    b',' b'<unk>' b',' b'<unk>' b',' b'double' b',' b'and' b'Irish' b'organizations' b',' b'fishing' b'so' b'simulate' b',' b'as' b'well' b'as' b'Dark' b','
    b'so' b'humanity' b'declared' b'debate' b'up' b'outright' b'Horus' b'.' b'In' b'addition' b',' b'the' b'anonymous' b'identities' b'landed' b'on' b'many' b'populations' b'in' b'1873'
    b',' b'when' b'it' b'has' b'since' b'the' b'agricultural' b'peaked' b'of' b'the' b'double' b'territory' b'.' b'The' b'County' b'History' b'is' b'a' b'edible' b'species'
    b'in' b'young' b'Polynesian' b'areas' b',' b'particularly' b'connected' b'in' b'addition' b'to' b'the' b'Roman' b'Republic' b'of' b'Ireland' b'.' b'In' b'an' b'weeks' b'to'
    b'be' b'given' b'a' b'carbon' b'<unk>' b'that' b'there' b'were' b'Great' b'Bang' b',' b'they' b'strongly' b'breed' b'that' b'John' b'caves' b'.' b'The' b'Viking'
    b'starling' b'is' b'given' b'"' b'abandoned' b',' b'possessing' b'and' b'observers' b'like' b'sex' b',' b'the' b'spreading' b'urban' b',' b'and' b'so' b'domestic' b'individual'
    b',' b'and' b'a' b'Palmyrene' b'northwestern' b'place' b'"' b'.' b'Once' b'after' b'the' b'Outer' b'herds' b',' b'truncated' b',' b'they' b'may' b'be' b'frequently'
    b'feeling' b'until' b'drawing' b'flights' b'all' b'.' b'Once' b'rather' b'sporting' b'increases' b'towards' b'about' b'13' b'million' b'(' b'52' b'today' b')' b',' b'this'
    b'tomb' b'is' b'supplied' b'by' b'the' b'other' b'population' b'of' b'Amanita' b'Rico' b',' b'but' b'Inafune' b'always' b'thought' b'not' b'King' b'At' b'mayoral' b'movement'
    b'.' b'Salamis' b'formerly' b'feeds' b'in' b'active' b'Types' b'.' b'Unlike' b'these' b',' b'acre' b',' b'or' b'collected' b'for' b'a' b'prehistoric' b'microscope' b','
    b'can' b'<unk>' b'they' b'at' b'different' b'predators' b',' b'even' b'well' b'controlled' b'knowledge' b'.' b'<eos>' b'Through' b'Hopkins' b'carving' b',' b'Iago' b'reported' b'a'
    b'48' b'@-@' b'year' b'old' b'tool' b'for' b'Ceres' b'and' b'number' b'with' b'four' b'Hisn' b'eggs' b'.' b'A' b'new' b'population' b'and' b'numbers' b'of'
    b'"' b'misfortune' b'"' b'range' b'on' b'errors' b'such' b'as' b'some' b'domestic' b'review' b',' b'which' b'have' b'mixed' b'inhabited' b'of' b'its' b'own' b'ancestors'
    b',' b'luminosity' b',' b'<unk>' b',' b'Watch' b'and' b'fish' b'.' b'In' b'a' b'source' b'rusty' b'@-@' b'owned' b'cycle' b'\xe2\x80\x94' b'such' b'as' b'Korea'
    b',' b'a' b'planet' b'became' b'sufficiently' b'far' b'to' b'do' b'so' b'before' b'state' b'in' b',' b'taking' b'other' b'one' b'of' b'the' b'options' b','
    b'extreme' b'or' b'uneven' b',' b'covers' b'throughout' b'sinking' b'music' b"'s" b'justice' b'and' b'education' b'.' b'They' b'also' b'have' b'also' b'historically' b'supported' b'Jesus'
    b'and' b'supervisors' b'.' b'Many' b'of' b'these' b'birds' b',' b'Kalyanasundara' b'lessons' b',' b'common' b'or' b'other' b'female' b'bird' b'have' b'ultra' b'methods' b'limited'
    b'in' b'Puerto' b'Isthmus' b',' b'while' b'his' b'population' b'will' b'be' b'reinforced' b',' b'for' b'example' b'and' b'wrong' b'.' b'The' b'species' b'may' b'be'
    b'highly' b'rich' b'faces' b'to' b'20' b'@-@' b'nine' b'hours' b'.' b'It' b'is' b'expected' b'that' b'they' b'open' b'degraded' b'or' b'impression' b'non' b'@-@'
    b'boxes' b'such' b'as' b'simple' b'<unk>' b',' b'a' b'derivatives' b'of' b'sex' b',' b'well' b'to' b'degradation' b',' b'such' b'as' b'Vincent' b'<unk>' b','





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 187.8
    loss: 5.168
    elapsed time (seconds): 106.3




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  3.293 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

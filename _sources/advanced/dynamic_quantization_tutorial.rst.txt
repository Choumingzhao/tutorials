
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'campaigns' b',' b'which' b'that' b'was' b'not' b'any' b'called' b'as' b'rowing' b',' b'while' b'in' b'a' b'first' b'Muslim' b'benefit' b'"' b'<unk>' b'range'
    b'and' b'is' b'a' b'set' b'to' b'black' b'materials' b'over' b'a' b'talented' b'drum' b'scent' b'"' b',' b'but' b'capital' b'declares' b',' b'while' b'Scientologists'
    b'are' b'making' b'possible' b'dried' b'.' b'Ceres' b'writes' b'of' b'the' b'character' b'and' b'expressed' b'up' b'institutions' b'back' b'through' b'its' b'buildings' b'.' b'In'
    b'particular' b',' b'1786' b'successes' b',' b'<unk>' b'and' b'cartoonist' b'theologians' b'(' b'Japan' b'issued' b'on' b'casemated' b'which' b'the' b'king' b'26' b'\xe2\x80\x93' b'28'
    b'tons' b')' b',' b'can' b'began' b'to' b'be' b'identified' b'in' b'a' b'effort' b'.' b'The' b'Sitriuc' b"'s" b'<unk>' b'beaten' b'a' b'Horizon' b'of'
    b'the' b'game' b'to' b'Joni' b'Hopper' b',' b'Joe' b'<unk>' b'1632' b'Hamilton' b'(' b'EMI' b')' b'.' b'<eos>' b'The' b'planet' b'was' b'found' b'by'
    b'production' b'being' b'recorded' b'on' b'corn' b'was' b'developed' b'in' b'South' b'America' b'with' b'currently' b'down' b'by' b'the' b'ousting' b'of' b'its' b'set' b'('
    b'Richardson' b')' b'and' b'a' b'white' b'quest' b';' b'if' b'Andres' b'Chapman' b'(' b'1950' b')' b'were' b'also' b'released' b'for' b'his' b'owner' b','
    b'<unk>' b'1330' b',' b'it' b'took' b'many' b'effort' b'between' b'Crash' b'Island' b',' b'an' b'modern' b'biography' b'campaign' b'affirmed' b'by' b'issuing' b'other' b'structures'
    b'or' b'syndicated' b',' b'Toirdelbach' b',' b'social' b'niche' b',' b'museums' b',' b'social' b'low' b'rocks' b'and' b'critics' b',' b'and' b'help' b'<unk>' b'amongst'
    b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'FITs' b'variation' b'150' b'large' b'places' b'before' b'unreliable' b'and' b'Dun'
    b'Matt' b'mafia' b',' b'which' b'is' b'known' b'as' b'"' b'Kompong' b'"' b'Milton' b',' b'Lewis' b',' b'Bells' b',' b'and' b'"' b'Hits' b'"'
    b',' b'Inc' b',' b'according' b'to' b'"' b'the' b'remix' b'"' b'publicized' b'@-@' b'54' b'exemptions' b'.' b'<eos>' b'Additional' b'reception' b'favored' b'green' b'annually'
    b'during' b'the' b'season' b',' b'including' b'upgrading' b'protection' b'echo' b',' b'licences' b',' b'<unk>' b',' b'and' b'monkeys' b'who' b'considered' b'what' b'escapes' b'by'
    b'an' b'number' b'of' b'tails' b'are' b'a' b'believer' b',' b'and' b'before' b',' b'it' b'uses' b'its' b'governor' b',' b'claiming' b'that' b'"' b'they'
    b'would' b'run' b'you' b'the' b'glasses' b'in' b'performing' b'quality' b',' b'"' b'and' b'"' b'when' b'you' b'prepared' b'...' b'there' b'has' b'worked' b'a'
    b'heart' b'show' b'"' b'(' b'<unk>' b')' b',' b'victims' b'of' b'the' b'rock' b'<unk>' b'.' b'A' b'fearless' b'message' b',' b'"' b'If' b'I'
    b'hope' b'not' b'in' b'join' b'control' b'of' b'fresh' b'that' b'"' b',' b'but' b'only' b'her' b'only' b'celebrity' b'and' b'comparable' b'@-@' b'down' b'theme'
    b'of' b'200' b'@,@' b'000' b'burn' b'Covenant' b'buildings' b'.' b'The' b'ventral' b'cavalry' b'kind' b'were' b'written' b'by' b'theorists' b'.' b'The' b'growth' b'that'
    b'argument' b',' b'blackish' b'Music' b',' b'venom' b',' b'and' b'Jo' b'are' b'all' b'<unk>' b'.' b'The' b'ground' b'has' b'<unk>' b'wear' b'@-@' b'pitched'
    b'vocals' b',' b'<unk>' b',' b'which' b'are' b'white' b'1209' b',' b'which' b'is' b'making' b'by' b'the' b'Younger' b'of' b'a' b'female' b'story' b'.'
    b'Instead' b',' b'the' b'fuller' b'releases' b',' b'with' b'its' b'hatching' b'"' b'is' b'a' b'X' b'panel' b'of' b'<unk>' b',' b'a' b'painful' b'option'
    b'understanding' b',' b'and' b'more' b'vicious' b'@-@' b'pop' b'plants' b',' b'<unk>' b',' b'<unk>' b',' b'power' b',' b'circulating' b',' b'pollution' b'(' b'probably'
    b'Triatominae' b')' b'and' b',' b'like' b'enriched' b'.' b'Once' b'they' b'cannot' b'realise' b'thin' b'.' b'If' b'water' b'even' b'he' b'is' b'hammer' b'like'
    b'her' b'twist' b'from' b'the' b'other' b'syllables' b',' b'but' b'I' b'couldn' b"'t" b'apparently' b'praise' b'on' b'coming' b'to' b'reading' b'.' b'"' b'an'
    b'Dollodon' b'in' b'The' b'name' b'stated' b'that' b'this' b'"' b'a' b'little' b'intense' b'style' b'"' b'.' b'As' b'a' b'result' b',' b'he' b'up'
    b'a' b'first' b'increase' b'in' b'Oaxaca' b'.' b'The' b'task' b'of' b'Jagannadh' b'again' b'does' b'not' b'haunting' b'with' b'their' b'arrival' b'.' b'Ronald' b'Boom'
    b'Tuttle' b'has' b'the' b'second' b'herb' b'of' b'a' b'freestyle' b'habit' b'of' b'tridentata' b',' b'as' b'M' b'in' b'four' b'students' b'.' b'In' b'the'
    b'opinion' b',' b'Large' b'chemicals' b'have' b'suggested' b'his' b'musical' b'prose' b'.' b'<eos>' b'The' b'SWPA' b'is' b'devised' b'by' b'flies' b'.' b'These' b'numerous'
    b'names' b'can' b'be' b'greatly' b'used' b',' b'on' b'other' b'individual' b'<unk>' b'.' b'The' b'literary' b'hammer' b'vegetation' b'is' b'centered' b'in' b'a' b'single'
    b'or' b'sharp' b'background' b'violence' b':' b'class' b',' b'raising' b',' b'gusting' b'their' b'true' b'tree' b'(' b'or' b'as' b'they' b'silvery' b'<unk>' b')'
    b',' b'or' b'it' b'is' b'short' b'that' b'kakapo' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Wadi' b'arts' b'=' b'=' b'<eos>' b'<eos>' b'Alkan' b'of'
    b'framing' b'is' b'known' b'as' b'adjective' b',' b'or' b'directed' b'by' b'turbulence' b'around' b'her' b'subject' b'.' b'After' b'the' b'same' b'high' b',' b'this'
    b'bird' b'can' b'be' b'seen' b'from' b'predatory' b'motion' b',' b'when' b'their' b'body' b'shows' b'have' b'been' b'determined' b';' b'the' b'female' b'can' b'offer'
    b'Madison' b'and' b'understand' b'stark' b'telescopes' b'or' b'inflow' b'.' b'Ceres' b'gives' b'R\xc3\xa9union' b'to' b'express' b'Schneider' b';' b'they' b'combine' b'Evita' b',' b'all'
    b'is' b'sometimes' b'common' b'.' b'The' b'presence' b'of' b'a' b'trustees' b'is' b'Danny' b'greatly' b'view' b'by' b'Good' b'Astraeus' b'drying' b'.' b'As' b'a'
    b'naked' b'name' b',' b'Harishchandra' b'(' b'see' b')' b'God' b'gives' b'contradictions' b'in' b'"' b'much' b'high' b'their' b'earth' b'when' b'when' b',' b'until'
    b'that' b'school' b',' b'there' b'is' b'no' b'or' b'kitsune' b',' b'the' b'male' b'for' b'maturity' b'as' b'singer' b'B.' b'inflation' b',' b'feeding' b'into'
    b'these' b'ways' b'viewed' b',' b'very' b'like' b'by' b'regime' b'but' b'sometimes' b'stars' b'to' b'understand' b'his' b'feet' b'amongst' b'their' b'age' b'and' b'him'
    b'to' b'the' b'peculiar' b'beautifully' b'\xe2\x80\x94' b'"' b'probably' b'allows' b'a' b'one' b'of' b'$' b'200' b'@,@' b'000' b'per' b'month' b'from' b'a' b'exchange'
    b'of' b'brick' b'series' b'.' b'Egyptians' b'have' b'been' b'first' b'taken' b'with' b'Ulysses' b',' b'having' b'more' b'downed' b'in' b'association' b'containing' b'showing' b'plates'
    b'at' b'a' b'main' b'level' b'of' b'a' b'dwarf' b',' b'their' b'lack' b'of' b'fish' b'in' b'that' b',' b'two' b'months' b',' b'as' b'they'
    b'are' b'reserved' b'from' b'charged' b'to' b'a' b'eye' b'.' b'Instead' b',' b'there' b'are' b'rarely' b'elliptical' b'evidence' b'for' b'!' b'Frost' b"'s" b'mandolin'
    b',' b'"' b'<unk>' b'"' b'.' b'These' b'<unk>' b'(' b'Throne' b'Week' b')' b'suggests' b'a' b'"' b'little' b'fraction' b'of' b'a' b'encounters' b'so'
    b'aged' b'or' b'conflicts' b'"' b'.' b'The' b'<unk>' b'is' b'often' b'a' b'typical' b'object' b'and' b'joins' b'its' b'Dimitri' b'and' b'throat' b'hanging' b'.'
    b'Zygoballus' b'may' b'be' b'a' b'arena' b'called' b'"' b'<unk>' b'<unk>' b'"' b',' b'but' b'measures' b'industries' b',' b'other' b'or' b'legal' b'rabbi' b'bare'
    b',' b'changed' b'its' b'cellular' b'name' b'.' b'Quinn' b'noted' b'that' b'also' b',' b'is' b'only' b'anything' b'by' b'other' b'police' b',' b'restrictions' b','
    b'as' b'it' b'could' b'be' b'argued' b'they' b'were' b'strikingly' b'.' b'"' b'<unk>' b'<unk>' b'see' b'you' b'should' b'find' b'hitting' b'.' b'"' b'<eos>'
    b'The' b'character' b'is' b'suggests' b'to' b'be' b'easier' b'to' b'indicate' b'that' b'Corythosaurus' b'mean' b'the' b'movement' b'and' b'destroy' b'speaking' b'columnist' b'by' b'few'
    b'Lang' b',' b'falling' b'into' b'up' b'to' b'dinosaurs' b'.' b'This' b'behavior' b'was' b'mainly' b'used' b';' b'complete' b',' b'they' b'can' b'be' b'<unk>'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.0
    loss: 5.168
    elapsed time (seconds): 115.8




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  21.814 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

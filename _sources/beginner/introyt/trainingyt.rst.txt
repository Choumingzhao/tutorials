
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:25, 308610.24it/s]
      0%|          | 65536/26421880 [00:00<01:26, 303576.37it/s]
      0%|          | 131072/26421880 [00:00<00:59, 439285.15it/s]
      1%|          | 196608/26421880 [00:00<00:52, 503149.09it/s]
      2%|1         | 425984/26421880 [00:00<00:24, 1080126.13it/s]
      2%|2         | 557056/26421880 [00:00<00:23, 1121225.45it/s]
      3%|2         | 720896/26421880 [00:00<00:20, 1245619.24it/s]
      3%|3         | 917504/26421880 [00:00<00:17, 1420769.84it/s]
      4%|4         | 1081344/26421880 [00:00<00:17, 1446579.35it/s]
      5%|4         | 1245184/26421880 [00:01<00:17, 1463665.06it/s]
      5%|5         | 1441792/26421880 [00:01<00:15, 1565588.81it/s]
      6%|6         | 1605632/26421880 [00:01<00:16, 1546719.49it/s]
      7%|6         | 1802240/26421880 [00:01<00:15, 1621703.47it/s]
      8%|7         | 1998848/26421880 [00:01<00:14, 1676040.08it/s]
      8%|8         | 2195456/26421880 [00:01<00:14, 1713501.67it/s]
      9%|9         | 2392064/26421880 [00:01<00:13, 1740601.33it/s]
     10%|9         | 2588672/26421880 [00:01<00:13, 1758015.87it/s]
     11%|#         | 2818048/26421880 [00:01<00:12, 1857782.39it/s]
     11%|#1        | 3014656/26421880 [00:02<00:12, 1840673.91it/s]
     12%|#2        | 3211264/26421880 [00:02<00:12, 1831473.32it/s]
     13%|#3        | 3440640/26421880 [00:02<00:12, 1906676.26it/s]
     14%|#3        | 3637248/26421880 [00:02<00:12, 1880158.50it/s]
     15%|#4        | 3866624/26421880 [00:02<00:11, 1942412.90it/s]
     15%|#5        | 4063232/26421880 [00:02<00:11, 1903283.80it/s]
     16%|#6        | 4292608/26421880 [00:02<00:11, 1958719.87it/s]
     17%|#7        | 4521984/26421880 [00:02<00:10, 2000256.75it/s]
     18%|#7        | 4751360/26421880 [00:02<00:10, 2026241.27it/s]
     19%|#8        | 4980736/26421880 [00:03<00:10, 2045430.49it/s]
     20%|#9        | 5210112/26421880 [00:03<00:10, 2061972.47it/s]
     21%|##        | 5439488/26421880 [00:03<00:10, 2070206.52it/s]
     21%|##1       | 5668864/26421880 [00:03<00:09, 2079895.83it/s]
     22%|##2       | 5898240/26421880 [00:03<00:09, 2080984.35it/s]
     23%|##3       | 6127616/26421880 [00:03<00:09, 2085520.63it/s]
     24%|##4       | 6356992/26421880 [00:03<00:09, 2090648.56it/s]
     25%|##4       | 6586368/26421880 [00:03<00:09, 2093873.45it/s]
     26%|##5       | 6815744/26421880 [00:03<00:09, 2096189.94it/s]
     27%|##6       | 7045120/26421880 [00:04<00:09, 2096532.23it/s]
     28%|##7       | 7274496/26421880 [00:04<00:09, 2098406.85it/s]
     28%|##8       | 7503872/26421880 [00:04<00:09, 2098852.93it/s]
     29%|##9       | 7733248/26421880 [00:04<00:08, 2099350.78it/s]
     30%|###       | 7962624/26421880 [00:04<00:08, 2100037.65it/s]
     31%|###1      | 8192000/26421880 [00:04<00:08, 2100880.61it/s]
     32%|###1      | 8421376/26421880 [00:04<00:08, 2102019.30it/s]
     33%|###2      | 8650752/26421880 [00:04<00:08, 2102559.23it/s]
     34%|###3      | 8880128/26421880 [00:04<00:08, 2102209.42it/s]
     34%|###4      | 9109504/26421880 [00:05<00:08, 2103264.68it/s]
     35%|###5      | 9338880/26421880 [00:05<00:08, 2103396.75it/s]
     36%|###6      | 9568256/26421880 [00:05<00:08, 2103846.63it/s]
     37%|###7      | 9797632/26421880 [00:05<00:07, 2103173.59it/s]
     38%|###7      | 10027008/26421880 [00:05<00:07, 2101472.25it/s]
     39%|###8      | 10256384/26421880 [00:05<00:07, 2101364.69it/s]
     40%|###9      | 10485760/26421880 [00:05<00:07, 2101454.64it/s]
     41%|####      | 10715136/26421880 [00:05<00:07, 2101503.84it/s]
     41%|####1     | 10944512/26421880 [00:05<00:07, 2101082.53it/s]
     42%|####2     | 11173888/26421880 [00:06<00:07, 2101573.81it/s]
     43%|####3     | 11403264/26421880 [00:06<00:07, 2101216.85it/s]
     44%|####4     | 11632640/26421880 [00:06<00:07, 2100682.16it/s]
     45%|####4     | 11862016/26421880 [00:06<00:06, 2100634.11it/s]
     46%|####5     | 12091392/26421880 [00:06<00:06, 2100687.15it/s]
     47%|####6     | 12320768/26421880 [00:06<00:06, 2100590.82it/s]
     48%|####7     | 12582912/26421880 [00:06<00:06, 2185364.12it/s]
     48%|####8     | 12812288/26421880 [00:06<00:06, 2160388.75it/s]
     49%|####9     | 13041664/26421880 [00:06<00:06, 2142533.94it/s]
     50%|#####     | 13271040/26421880 [00:06<00:06, 2130673.96it/s]
     51%|#####1    | 13500416/26421880 [00:07<00:06, 2122178.06it/s]
     52%|#####1    | 13729792/26421880 [00:07<00:05, 2116979.04it/s]
     53%|#####2    | 13959168/26421880 [00:07<00:05, 2112381.66it/s]
     54%|#####3    | 14188544/26421880 [00:07<00:05, 2110433.35it/s]
     55%|#####4    | 14450688/26421880 [00:07<00:05, 2189478.08it/s]
     56%|#####5    | 14680064/26421880 [00:07<00:05, 2165082.10it/s]
     56%|#####6    | 14909440/26421880 [00:07<00:05, 2147655.84it/s]
     57%|#####7    | 15138816/26421880 [00:07<00:05, 2135438.39it/s]
     58%|#####8    | 15368192/26421880 [00:07<00:05, 2126790.31it/s]
     59%|#####9    | 15630336/26421880 [00:08<00:04, 2203356.41it/s]
     60%|######    | 15859712/26421880 [00:08<00:04, 2174273.01it/s]
     61%|######1   | 16121856/26421880 [00:08<00:04, 2235951.14it/s]
     62%|######1   | 16351232/26421880 [00:08<00:04, 2198417.46it/s]
     63%|######2   | 16580608/26421880 [00:08<00:04, 2174432.45it/s]
     64%|######3   | 16842752/26421880 [00:08<00:04, 2237965.58it/s]
     65%|######4   | 17104896/26421880 [00:08<00:04, 2283408.95it/s]
     66%|######5   | 17334272/26421880 [00:08<00:04, 2234227.76it/s]
     67%|######6   | 17596416/26421880 [00:08<00:03, 2281396.15it/s]
     68%|######7   | 17858560/26421880 [00:09<00:03, 2314255.58it/s]
     69%|######8   | 18120704/26421880 [00:09<00:03, 2337095.14it/s]
     70%|######9   | 18382848/26421880 [00:09<00:03, 2355553.52it/s]
     71%|#######   | 18644992/26421880 [00:09<00:03, 2369462.44it/s]
     72%|#######1  | 18907136/26421880 [00:09<00:03, 2379444.57it/s]
     73%|#######2  | 19169280/26421880 [00:09<00:03, 2389404.89it/s]
     74%|#######3  | 19431424/26421880 [00:09<00:02, 2395826.02it/s]
     75%|#######4  | 19693568/26421880 [00:09<00:02, 2399478.52it/s]
     76%|#######5  | 19955712/26421880 [00:09<00:02, 2400411.37it/s]
     77%|#######6  | 20250624/26421880 [00:10<00:02, 2487550.94it/s]
     78%|#######7  | 20545536/26421880 [00:10<00:02, 2547820.26it/s]
     79%|#######8  | 20807680/26421880 [00:10<00:02, 2510877.05it/s]
     80%|#######9  | 21102592/26421880 [00:10<00:02, 2567278.53it/s]
     81%|########  | 21397504/26421880 [00:10<00:01, 2606674.36it/s]
     82%|########2 | 21725184/26421880 [00:10<00:01, 2718698.43it/s]
     83%|########3 | 22020096/26421880 [00:10<00:01, 2714513.83it/s]
     84%|########4 | 22315008/26421880 [00:10<00:01, 2713616.03it/s]
     86%|########5 | 22642688/26421880 [00:10<00:01, 2792844.13it/s]
     87%|########6 | 22970368/26421880 [00:11<00:01, 2854615.69it/s]
     88%|########8 | 23298048/26421880 [00:11<00:01, 2899108.09it/s]
     89%|########9 | 23625728/26421880 [00:11<00:00, 2930581.42it/s]
     91%|######### | 23953408/26421880 [00:11<00:00, 2952954.91it/s]
     92%|#########1| 24281088/26421880 [00:11<00:00, 2971672.91it/s]
     93%|#########3| 24641536/26421880 [00:11<00:00, 3067017.37it/s]
     95%|#########4| 25001984/26421880 [00:11<00:00, 3134327.52it/s]
     96%|#########5| 25362432/26421880 [00:11<00:00, 3187348.52it/s]
     97%|#########7| 25722880/26421880 [00:11<00:00, 3225430.20it/s]
     99%|#########8| 26116096/26421880 [00:12<00:00, 3330330.59it/s]
    100%|##########| 26421880/26421880 [00:12<00:00, 2198055.23it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 269868.49it/s]
    100%|##########| 29515/29515 [00:00<00:00, 268494.19it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 305382.57it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 304338.00it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 442526.89it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 627778.99it/s]
     11%|#1        | 491520/4422102 [00:00<00:03, 1274394.31it/s]
     21%|##1       | 950272/4422102 [00:00<00:01, 2287304.09it/s]
     44%|####3     | 1933312/4422102 [00:00<00:00, 4517407.24it/s]
     87%|########6 | 3833856/4422102 [00:00<00:00, 8690889.79it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 5105371.23it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 26172456.96it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Coat  Trouser  Pullover  Trouser




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.8046, 0.0304, 0.1841, 0.0557, 0.7391, 0.6027, 0.8591, 0.3765, 0.8917,
             0.3125],
            [0.7961, 0.2560, 0.9631, 0.4684, 0.1837, 0.0467, 0.7323, 0.2586, 0.8717,
             0.5834],
            [0.6750, 0.6406, 0.3333, 0.2410, 0.6966, 0.4203, 0.0226, 0.2849, 0.6877,
             0.0739],
            [0.6876, 0.3259, 0.3475, 0.4141, 0.8828, 0.8567, 0.3918, 0.2529, 0.1329,
             0.4281]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.6686134338378906




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.6247426117882133
      batch 2000 loss: 0.8018911346830427
      batch 3000 loss: 0.727356237544911
      batch 4000 loss: 0.6175747219759505
      batch 5000 loss: 0.5857217667710501
      batch 6000 loss: 0.5639158300661947
      batch 7000 loss: 0.519182712812093
      batch 8000 loss: 0.493648892960744
      batch 9000 loss: 0.4942000116754789
      batch 10000 loss: 0.47933862158539703
      batch 11000 loss: 0.443132991431281
      batch 12000 loss: 0.4636632070443593
      batch 13000 loss: 0.43529185960144967
      batch 14000 loss: 0.41920266692418956
      batch 15000 loss: 0.42081677814672
    LOSS train 0.42081677814672 valid 0.4218565821647644
    EPOCH 2:
      batch 1000 loss: 0.39217920375056564
      batch 2000 loss: 0.39675813264143656
      batch 3000 loss: 0.37031764031744385
      batch 4000 loss: 0.3821280242449138
      batch 5000 loss: 0.3802448164242378
      batch 6000 loss: 0.3851464796840446
      batch 7000 loss: 0.3669140161461983
      batch 8000 loss: 0.35873903390600753
      batch 9000 loss: 0.3766832792639034
      batch 10000 loss: 0.373220066523063
      batch 11000 loss: 0.3609174493358296
      batch 12000 loss: 0.3646209109959309
      batch 13000 loss: 0.3359545318028977
      batch 14000 loss: 0.34221017016479166
      batch 15000 loss: 0.3419360389954818
    LOSS train 0.3419360389954818 valid 0.3767118453979492
    EPOCH 3:
      batch 1000 loss: 0.3318978542359546
      batch 2000 loss: 0.3362422522890265
      batch 3000 loss: 0.31525625635862525
      batch 4000 loss: 0.33015644022854396
      batch 5000 loss: 0.33542632924756616
      batch 6000 loss: 0.32739855036849624
      batch 7000 loss: 0.3195054878188603
      batch 8000 loss: 0.32402448075666324
      batch 9000 loss: 0.32862955932947807
      batch 10000 loss: 0.3276563837985159
      batch 11000 loss: 0.3284340649257065
      batch 12000 loss: 0.31204279193015827
      batch 13000 loss: 0.2951424870945157
      batch 14000 loss: 0.3032696091178732
      batch 15000 loss: 0.29456195973472493
    LOSS train 0.29456195973472493 valid 0.3344053328037262
    EPOCH 4:
      batch 1000 loss: 0.2919416008971966
      batch 2000 loss: 0.3104461865041521
      batch 3000 loss: 0.29670521668956645
      batch 4000 loss: 0.3070418506486749
      batch 5000 loss: 0.3036909163973978
      batch 6000 loss: 0.29175922707939755
      batch 7000 loss: 0.29741062474864155
      batch 8000 loss: 0.2742369895430475
      batch 9000 loss: 0.2898148419863064
      batch 10000 loss: 0.29893217539148464
      batch 11000 loss: 0.2968797148846024
      batch 12000 loss: 0.28551113188905586
      batch 13000 loss: 0.2738406217127922
      batch 14000 loss: 0.29308199993484596
      batch 15000 loss: 0.29193803348133224
    LOSS train 0.29193803348133224 valid 0.3242776095867157
    EPOCH 5:
      batch 1000 loss: 0.25399179497061414
      batch 2000 loss: 0.2815270257389893
      batch 3000 loss: 0.26662007930638354
      batch 4000 loss: 0.2918870379290961
      batch 5000 loss: 0.289075060072164
      batch 6000 loss: 0.2762483724843114
      batch 7000 loss: 0.26360352495196276
      batch 8000 loss: 0.27767727603305686
      batch 9000 loss: 0.2625902026402164
      batch 10000 loss: 0.2802341211605817
      batch 11000 loss: 0.27984632376418994
      batch 12000 loss: 0.27480044877483945
      batch 13000 loss: 0.28103435726751197
      batch 14000 loss: 0.2926890278354058
      batch 15000 loss: 0.2765048008043832
    LOSS train 0.2765048008043832 valid 0.3184847831726074




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  35.811 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:26, 306301.36it/s]
      0%|          | 65536/26421880 [00:00<01:27, 301181.12it/s]
      0%|          | 131072/26421880 [00:00<01:00, 436276.56it/s]
      1%|          | 229376/26421880 [00:00<00:42, 617229.20it/s]
      2%|1         | 458752/26421880 [00:00<00:22, 1147613.78it/s]
      2%|2         | 589824/26421880 [00:00<00:22, 1160878.09it/s]
      3%|2         | 720896/26421880 [00:00<00:21, 1172443.06it/s]
      3%|3         | 917504/26421880 [00:00<00:18, 1367792.66it/s]
      4%|4         | 1114112/26421880 [00:00<00:16, 1498067.40it/s]
      5%|4         | 1310720/26421880 [00:01<00:15, 1586353.79it/s]
      6%|5         | 1540096/26421880 [00:01<00:14, 1732992.41it/s]
      7%|6         | 1736704/26421880 [00:01<00:14, 1754383.81it/s]
      7%|7         | 1933312/26421880 [00:01<00:13, 1763679.31it/s]
      8%|8         | 2162688/26421880 [00:01<00:13, 1860555.91it/s]
      9%|9         | 2392064/26421880 [00:01<00:12, 1925578.17it/s]
     10%|9         | 2621440/26421880 [00:01<00:12, 1970794.27it/s]
     11%|#         | 2850816/26421880 [00:01<00:11, 2005260.27it/s]
     12%|#1        | 3080192/26421880 [00:01<00:11, 2028846.40it/s]
     13%|#2        | 3309568/26421880 [00:02<00:11, 2046204.17it/s]
     13%|#3        | 3538944/26421880 [00:02<00:11, 2059432.24it/s]
     14%|#4        | 3768320/26421880 [00:02<00:10, 2067620.69it/s]
     15%|#5        | 3997696/26421880 [00:02<00:10, 2072975.41it/s]
     16%|#5        | 4227072/26421880 [00:02<00:10, 2078343.34it/s]
     17%|#6        | 4489216/26421880 [00:02<00:10, 2165057.47it/s]
     18%|#7        | 4718592/26421880 [00:02<00:10, 2141498.39it/s]
     19%|#8        | 4980736/26421880 [00:02<00:09, 2205928.35it/s]
     20%|#9        | 5210112/26421880 [00:02<00:09, 2179206.71it/s]
     21%|##        | 5472256/26421880 [00:03<00:09, 2232700.91it/s]
     22%|##1       | 5701632/26421880 [00:03<00:09, 2199330.14it/s]
     23%|##2       | 5963776/26421880 [00:03<00:09, 2247414.81it/s]
     24%|##3       | 6225920/26421880 [00:03<00:08, 2285097.95it/s]
     24%|##4       | 6455296/26421880 [00:03<00:08, 2233990.86it/s]
     25%|##5       | 6717440/26421880 [00:03<00:08, 2274876.32it/s]
     26%|##6       | 6979584/26421880 [00:03<00:08, 2303453.04it/s]
     27%|##7       | 7241728/26421880 [00:03<00:08, 2322085.95it/s]
     28%|##8       | 7503872/26421880 [00:03<00:08, 2335132.41it/s]
     29%|##9       | 7766016/26421880 [00:04<00:07, 2349816.97it/s]
     30%|###       | 8028160/26421880 [00:04<00:07, 2354649.72it/s]
     31%|###1      | 8290304/26421880 [00:04<00:07, 2363109.46it/s]
     32%|###2      | 8552448/26421880 [00:04<00:07, 2369225.55it/s]
     33%|###3      | 8814592/26421880 [00:04<00:07, 2369361.62it/s]
     34%|###4      | 9076736/26421880 [00:04<00:07, 2369745.25it/s]
     35%|###5      | 9338880/26421880 [00:04<00:07, 2373483.59it/s]
     36%|###6      | 9601024/26421880 [00:04<00:07, 2376527.54it/s]
     37%|###7      | 9863168/26421880 [00:04<00:06, 2378295.50it/s]
     38%|###8      | 10125312/26421880 [00:05<00:06, 2377420.03it/s]
     39%|###9      | 10387456/26421880 [00:05<00:06, 2378812.34it/s]
     40%|####      | 10649600/26421880 [00:05<00:06, 2376916.39it/s]
     41%|####1     | 10911744/26421880 [00:05<00:06, 2379078.37it/s]
     42%|####2     | 11173888/26421880 [00:05<00:06, 2379782.31it/s]
     43%|####3     | 11436032/26421880 [00:05<00:06, 2377267.49it/s]
     44%|####4     | 11698176/26421880 [00:05<00:06, 2378609.36it/s]
     45%|####5     | 11960320/26421880 [00:05<00:06, 2380084.22it/s]
     46%|####6     | 12222464/26421880 [00:05<00:05, 2380846.99it/s]
     47%|####7     | 12484608/26421880 [00:06<00:05, 2381354.90it/s]
     48%|####8     | 12746752/26421880 [00:06<00:05, 2377970.86it/s]
     49%|####9     | 13008896/26421880 [00:06<00:05, 2379953.42it/s]
     50%|#####     | 13271040/26421880 [00:06<00:05, 2381203.93it/s]
     51%|#####1    | 13533184/26421880 [00:06<00:05, 2381967.04it/s]
     52%|#####2    | 13795328/26421880 [00:06<00:05, 2376220.79it/s]
     53%|#####3    | 14057472/26421880 [00:06<00:05, 2378486.77it/s]
     54%|#####4    | 14319616/26421880 [00:06<00:05, 2374418.11it/s]
     55%|#####5    | 14581760/26421880 [00:06<00:04, 2377377.95it/s]
     56%|#####6    | 14843904/26421880 [00:07<00:04, 2375024.23it/s]
     57%|#####7    | 15106048/26421880 [00:07<00:04, 2377118.50it/s]
     58%|#####8    | 15368192/26421880 [00:07<00:04, 2379908.82it/s]
     59%|#####9    | 15630336/26421880 [00:07<00:04, 2378170.55it/s]
     60%|######    | 15892480/26421880 [00:07<00:04, 2380232.53it/s]
     61%|######1   | 16154624/26421880 [00:07<00:04, 2383893.32it/s]
     62%|######2   | 16416768/26421880 [00:07<00:04, 2384138.62it/s]
     63%|######3   | 16678912/26421880 [00:07<00:04, 2388048.22it/s]
     64%|######4   | 16941056/26421880 [00:07<00:03, 2397426.63it/s]
     65%|######5   | 17203200/26421880 [00:08<00:03, 2395049.34it/s]
     66%|######6   | 17465344/26421880 [00:08<00:03, 2391655.97it/s]
     67%|######7   | 17727488/26421880 [00:08<00:03, 2390568.93it/s]
     68%|######8   | 17989632/26421880 [00:08<00:03, 2400232.05it/s]
     69%|######9   | 18251776/26421880 [00:08<00:03, 2331763.62it/s]
     70%|#######   | 18513920/26421880 [00:08<00:03, 2346359.41it/s]
     71%|#######1  | 18776064/26421880 [00:08<00:03, 2358441.80it/s]
     72%|#######2  | 19070976/26421880 [00:08<00:03, 2449543.44it/s]
     73%|#######3  | 19333120/26421880 [00:08<00:02, 2430835.77it/s]
     74%|#######4  | 19628032/26421880 [00:09<00:02, 2500904.98it/s]
     75%|#######5  | 19890176/26421880 [00:09<00:02, 2470719.54it/s]
     76%|#######6  | 20185088/26421880 [00:09<00:02, 2528935.30it/s]
     77%|#######7  | 20447232/26421880 [00:09<00:02, 2493769.65it/s]
     79%|#######8  | 20742144/26421880 [00:09<00:02, 2545517.62it/s]
     80%|#######9  | 21037056/26421880 [00:09<00:02, 2585832.16it/s]
     81%|########  | 21331968/26421880 [00:09<00:01, 2611028.73it/s]
     82%|########1 | 21626880/26421880 [00:09<00:01, 2635995.50it/s]
     83%|########2 | 21921792/26421880 [00:09<00:01, 2649523.86it/s]
     84%|########4 | 22216704/26421880 [00:10<00:01, 2663832.94it/s]
     85%|########5 | 22511616/26421880 [00:10<00:01, 2669013.61it/s]
     86%|########6 | 22839296/26421880 [00:10<00:01, 2758007.28it/s]
     88%|########7 | 23134208/26421880 [00:10<00:01, 2738905.83it/s]
     89%|########8 | 23461888/26421880 [00:10<00:01, 2805824.68it/s]
     90%|######### | 23789568/26421880 [00:10<00:00, 2852222.82it/s]
     91%|#########1| 24117248/26421880 [00:10<00:00, 2886411.89it/s]
     93%|#########2| 24444928/26421880 [00:10<00:00, 2914357.58it/s]
     94%|#########3| 24772608/26421880 [00:10<00:00, 2938405.39it/s]
     95%|#########4| 25100288/26421880 [00:11<00:00, 2956404.65it/s]
     96%|#########6| 25460736/26421880 [00:11<00:00, 3043336.74it/s]
     98%|#########7| 25788416/26421880 [00:11<00:00, 3034987.20it/s]
     99%|#########8| 26148864/26421880 [00:11<00:00, 3102847.94it/s]
    100%|##########| 26421880/26421880 [00:11<00:00, 2328173.57it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 271681.98it/s]
    100%|##########| 29515/29515 [00:00<00:00, 270316.93it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 298398.25it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 296961.61it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 432076.78it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 612858.76it/s]
     11%|#1        | 491520/4422102 [00:00<00:03, 1245680.33it/s]
     21%|##1       | 950272/4422102 [00:00<00:01, 2232566.38it/s]
     44%|####3     | 1933312/4422102 [00:00<00:00, 4404359.61it/s]
     87%|########6 | 3833856/4422102 [00:00<00:00, 8464032.97it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 4986666.06it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 25343048.11it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    T-shirt/top  Ankle Boot  Pullover  T-shirt/top




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.9790, 0.4676, 0.7394, 0.2284, 0.1735, 0.9424, 0.9527, 0.9553, 0.6020,
             0.4859],
            [0.1792, 0.3403, 0.2992, 0.0016, 0.9679, 0.7509, 0.9458, 0.9470, 0.5468,
             0.2276],
            [0.6772, 0.0946, 0.0020, 0.0614, 0.8467, 0.1576, 0.9166, 0.9755, 0.3973,
             0.9129],
            [0.1648, 0.6336, 0.8776, 0.3828, 0.6752, 0.5431, 0.0329, 0.3703, 0.2312,
             0.5826]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.471724510192871




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.6662852229774
      batch 2000 loss: 0.8096812990568578
      batch 3000 loss: 0.7030760142486543
      batch 4000 loss: 0.6518205845495686
      batch 5000 loss: 0.5915065215360373
      batch 6000 loss: 0.5636533324656193
      batch 7000 loss: 0.5574084940291941
      batch 8000 loss: 0.5141608303609537
      batch 9000 loss: 0.5006804744607071
      batch 10000 loss: 0.5185317920643138
      batch 11000 loss: 0.4872044110300485
      batch 12000 loss: 0.4418454728415236
      batch 13000 loss: 0.4345058948614169
      batch 14000 loss: 0.43858153954427687
      batch 15000 loss: 0.42543932210712226
    LOSS train 0.42543932210712226 valid 0.4503749907016754
    EPOCH 2:
      batch 1000 loss: 0.4403779079565138
      batch 2000 loss: 0.4048438442256302
      batch 3000 loss: 0.39527300160890444
      batch 4000 loss: 0.38342348560813116
      batch 5000 loss: 0.37899501729238544
      batch 6000 loss: 0.38318510193732436
      batch 7000 loss: 0.36260048740700584
      batch 8000 loss: 0.3821367916910676
      batch 9000 loss: 0.3889114229607512
      batch 10000 loss: 0.37376623037521495
      batch 11000 loss: 0.37428217346881865
      batch 12000 loss: 0.36173848748463205
      batch 13000 loss: 0.37380988151184286
      batch 14000 loss: 0.3675679681135225
      batch 15000 loss: 0.35003370034723774
    LOSS train 0.35003370034723774 valid 0.3782173991203308
    EPOCH 3:
      batch 1000 loss: 0.3401232124568196
      batch 2000 loss: 0.3518006274078143
      batch 3000 loss: 0.33889124291727785
      batch 4000 loss: 0.343494931556168
      batch 5000 loss: 0.3470254309326519
      batch 6000 loss: 0.33689396663378285
      batch 7000 loss: 0.33970501258984587
      batch 8000 loss: 0.33571256597840693
      batch 9000 loss: 0.32662159012115444
      batch 10000 loss: 0.30709084075741705
      batch 11000 loss: 0.31822795175785723
      batch 12000 loss: 0.33633481215157374
      batch 13000 loss: 0.3192164656742934
      batch 14000 loss: 0.3107523496239737
      batch 15000 loss: 0.3269281533600515
    LOSS train 0.3269281533600515 valid 0.32877179980278015
    EPOCH 4:
      batch 1000 loss: 0.3092621076698706
      batch 2000 loss: 0.318474381648195
      batch 3000 loss: 0.282129650376708
      batch 4000 loss: 0.2903034646486631
      batch 5000 loss: 0.31886589644056224
      batch 6000 loss: 0.28358273050434946
      batch 7000 loss: 0.3086613215647521
      batch 8000 loss: 0.3018894754776011
      batch 9000 loss: 0.29190463740114503
      batch 10000 loss: 0.3076254874032893
      batch 11000 loss: 0.3190072524813004
      batch 12000 loss: 0.3051741434406722
      batch 13000 loss: 0.3102478858197574
      batch 14000 loss: 0.29773994488712197
      batch 15000 loss: 0.30303046942249057
    LOSS train 0.30303046942249057 valid 0.3170938789844513
    EPOCH 5:
      batch 1000 loss: 0.26958422588367964
      batch 2000 loss: 0.30005796746895064
      batch 3000 loss: 0.28307940766785394
      batch 4000 loss: 0.27654941287604745
      batch 5000 loss: 0.2848033081835456
      batch 6000 loss: 0.28889325899277535
      batch 7000 loss: 0.2831646528364472
      batch 8000 loss: 0.2709382593472028
      batch 9000 loss: 0.27254242824727043
      batch 10000 loss: 0.2888313856244786
      batch 11000 loss: 0.29191803025029367
      batch 12000 loss: 0.2724795380994183
      batch 13000 loss: 0.2798841151861816
      batch 14000 loss: 0.2828497981441469
      batch 15000 loss: 0.28996483428800274
    LOSS train 0.28996483428800274 valid 0.3094257712364197




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  6.821 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

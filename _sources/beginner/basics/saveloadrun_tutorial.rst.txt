
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(weights='IMAGENET1K_V1')
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      1%|          | 4.73M/528M [00:00<00:11, 48.3MB/s]
      2%|2         | 12.0M/528M [00:00<00:08, 64.3MB/s]
      3%|3         | 18.4M/528M [00:00<00:08, 65.1MB/s]
      5%|4         | 24.7M/528M [00:00<00:10, 51.1MB/s]
      6%|5         | 31.4M/528M [00:00<00:09, 57.1MB/s]
      7%|7         | 37.2M/528M [00:00<00:08, 57.3MB/s]
      8%|8         | 42.9M/528M [00:00<00:09, 51.9MB/s]
      9%|9         | 48.0M/528M [00:00<00:10, 47.5MB/s]
     10%|#         | 54.1M/528M [00:01<00:09, 51.4MB/s]
     11%|#1        | 59.2M/528M [00:01<00:10, 47.0MB/s]
     12%|#2        | 63.8M/528M [00:01<00:10, 47.0MB/s]
     13%|#2        | 68.4M/528M [00:01<00:10, 47.2MB/s]
     14%|#4        | 74.2M/528M [00:01<00:09, 50.9MB/s]
     15%|#4        | 79.2M/528M [00:01<00:09, 49.1MB/s]
     16%|#6        | 85.6M/528M [00:01<00:08, 54.4MB/s]
     17%|#7        | 90.9M/528M [00:01<00:08, 54.5MB/s]
     18%|#8        | 96.8M/528M [00:01<00:07, 56.6MB/s]
     19%|#9        | 102M/528M [00:02<00:08, 53.4MB/s] 
     20%|##        | 107M/528M [00:02<00:09, 44.9MB/s]
     21%|##1       | 112M/528M [00:02<00:09, 45.3MB/s]
     22%|##2       | 117M/528M [00:02<00:09, 47.8MB/s]
     23%|##3       | 123M/528M [00:02<00:08, 50.9MB/s]
     24%|##4       | 128M/528M [00:02<00:08, 51.5MB/s]
     25%|##5       | 134M/528M [00:02<00:07, 53.1MB/s]
     26%|##6       | 139M/528M [00:02<00:07, 53.5MB/s]
     27%|##7       | 145M/528M [00:02<00:07, 56.2MB/s]
     29%|##8       | 153M/528M [00:03<00:06, 63.2MB/s]
     30%|###       | 159M/528M [00:03<00:06, 61.8MB/s]
     31%|###1      | 166M/528M [00:03<00:05, 64.8MB/s]
     33%|###2      | 172M/528M [00:03<00:05, 66.1MB/s]
     34%|###3      | 179M/528M [00:03<00:06, 58.0MB/s]
     35%|###5      | 185M/528M [00:03<00:05, 60.1MB/s]
     36%|###6      | 191M/528M [00:03<00:05, 60.4MB/s]
     37%|###7      | 197M/528M [00:03<00:05, 62.7MB/s]
     39%|###8      | 203M/528M [00:03<00:05, 61.0MB/s]
     40%|###9      | 210M/528M [00:03<00:05, 61.6MB/s]
     41%|####      | 216M/528M [00:04<00:05, 61.8MB/s]
     42%|####2     | 222M/528M [00:04<00:05, 64.0MB/s]
     43%|####3     | 228M/528M [00:04<00:05, 62.7MB/s]
     44%|####4     | 234M/528M [00:04<00:05, 53.0MB/s]
     45%|####5     | 240M/528M [00:04<00:07, 43.0MB/s]
     46%|####6     | 245M/528M [00:04<00:06, 44.9MB/s]
     47%|####7     | 249M/528M [00:04<00:06, 45.6MB/s]
     48%|####8     | 254M/528M [00:04<00:06, 44.2MB/s]
     49%|####9     | 259M/528M [00:05<00:06, 46.5MB/s]
     50%|####9     | 264M/528M [00:05<00:07, 37.6MB/s]
     51%|#####     | 268M/528M [00:05<00:07, 36.5MB/s]
     52%|#####1    | 272M/528M [00:05<00:06, 39.4MB/s]
     52%|#####2    | 277M/528M [00:05<00:06, 41.7MB/s]
     54%|#####3    | 283M/528M [00:05<00:05, 46.8MB/s]
     55%|#####4    | 289M/528M [00:05<00:04, 51.6MB/s]
     56%|#####5    | 294M/528M [00:05<00:04, 52.2MB/s]
     57%|#####6    | 299M/528M [00:06<00:04, 52.0MB/s]
     58%|#####7    | 304M/528M [00:06<00:04, 51.3MB/s]
     59%|#####8    | 309M/528M [00:06<00:04, 46.8MB/s]
     60%|#####9    | 314M/528M [00:06<00:04, 49.2MB/s]
     61%|######    | 320M/528M [00:06<00:04, 50.9MB/s]
     61%|######1   | 325M/528M [00:06<00:04, 48.9MB/s]
     62%|######2   | 329M/528M [00:06<00:04, 47.9MB/s]
     64%|######3   | 337M/528M [00:06<00:03, 55.6MB/s]
     65%|######5   | 343M/528M [00:06<00:03, 59.4MB/s]
     66%|######6   | 349M/528M [00:07<00:03, 48.7MB/s]
     67%|######7   | 354M/528M [00:07<00:04, 41.6MB/s]
     68%|######8   | 360M/528M [00:07<00:03, 46.4MB/s]
     69%|######9   | 365M/528M [00:07<00:04, 41.9MB/s]
     70%|######9   | 369M/528M [00:07<00:04, 37.6MB/s]
     71%|#######   | 373M/528M [00:07<00:04, 38.7MB/s]
     72%|#######1  | 380M/528M [00:07<00:03, 46.7MB/s]
     73%|#######2  | 385M/528M [00:08<00:04, 35.3MB/s]
     74%|#######3  | 389M/528M [00:08<00:04, 31.6MB/s]
     75%|#######4  | 393M/528M [00:08<00:03, 35.5MB/s]
     75%|#######5  | 397M/528M [00:08<00:03, 36.5MB/s]
     76%|#######6  | 403M/528M [00:08<00:03, 41.8MB/s]
     77%|#######7  | 409M/528M [00:08<00:02, 47.0MB/s]
     78%|#######8  | 414M/528M [00:08<00:02, 46.4MB/s]
     79%|#######9  | 419M/528M [00:08<00:02, 49.4MB/s]
     81%|########  | 425M/528M [00:08<00:02, 53.3MB/s]
     82%|########1 | 432M/528M [00:09<00:01, 56.8MB/s]
     83%|########2 | 437M/528M [00:09<00:01, 51.1MB/s]
     84%|########4 | 443M/528M [00:09<00:01, 55.0MB/s]
     85%|########5 | 449M/528M [00:09<00:01, 52.4MB/s]
     86%|########6 | 455M/528M [00:09<00:01, 54.9MB/s]
     87%|########7 | 460M/528M [00:09<00:01, 53.1MB/s]
     88%|########8 | 466M/528M [00:09<00:01, 53.3MB/s]
     89%|########9 | 471M/528M [00:09<00:01, 50.9MB/s]
     90%|######### | 477M/528M [00:09<00:00, 56.0MB/s]
     91%|#########1| 483M/528M [00:10<00:00, 49.0MB/s]
     92%|#########2| 488M/528M [00:10<00:00, 47.3MB/s]
     94%|#########3| 494M/528M [00:10<00:00, 52.1MB/s]
     95%|#########4| 500M/528M [00:10<00:00, 56.3MB/s]
     96%|#########6| 507M/528M [00:10<00:00, 61.4MB/s]
     97%|#########7| 513M/528M [00:10<00:00, 60.3MB/s]
     99%|#########8| 520M/528M [00:10<00:00, 64.0MB/s]
    100%|#########9| 527M/528M [00:10<00:00, 63.6MB/s]
    100%|##########| 528M/528M [00:10<00:00, 50.9MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify weights, i.e. create untrained model
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Related Tutorials
-----------------
`Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.771 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

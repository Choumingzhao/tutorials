
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(weights='IMAGENET1K_V1')
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      2%|2         | 10.6M/528M [00:00<00:04, 111MB/s]
      7%|6         | 34.5M/528M [00:00<00:02, 193MB/s]
     11%|#1        | 58.4M/528M [00:00<00:02, 220MB/s]
     16%|#5        | 81.9M/528M [00:00<00:02, 230MB/s]
     20%|#9        | 104M/528M [00:00<00:01, 230MB/s] 
     24%|##3       | 126M/528M [00:00<00:01, 224MB/s]
     28%|##7       | 147M/528M [00:00<00:02, 137MB/s]
     31%|###1      | 164M/528M [00:01<00:05, 65.3MB/s]
     33%|###3      | 176M/528M [00:01<00:07, 52.0MB/s]
     35%|###5      | 186M/528M [00:02<00:08, 44.2MB/s]
     37%|###6      | 193M/528M [00:02<00:08, 43.6MB/s]
     38%|###7      | 199M/528M [00:02<00:08, 40.6MB/s]
     39%|###8      | 204M/528M [00:02<00:08, 41.4MB/s]
     40%|###9      | 209M/528M [00:02<00:07, 42.5MB/s]
     41%|####      | 214M/528M [00:03<00:07, 41.1MB/s]
     41%|####1     | 218M/528M [00:03<00:08, 40.2MB/s]
     42%|####2     | 223M/528M [00:03<00:07, 42.3MB/s]
     43%|####3     | 228M/528M [00:03<00:08, 37.4MB/s]
     44%|####3     | 231M/528M [00:03<00:08, 37.2MB/s]
     45%|####4     | 236M/528M [00:03<00:07, 38.6MB/s]
     45%|####5     | 239M/528M [00:04<00:13, 22.7MB/s]
     46%|####5     | 242M/528M [00:04<00:12, 24.0MB/s]
     46%|####6     | 245M/528M [00:04<00:11, 25.2MB/s]
     47%|####7     | 248M/528M [00:04<00:12, 24.2MB/s]
     48%|####7     | 251M/528M [00:04<00:11, 24.5MB/s]
     48%|####8     | 254M/528M [00:04<00:11, 24.3MB/s]
     49%|####8     | 256M/528M [00:04<00:12, 23.3MB/s]
     49%|####8     | 258M/528M [00:04<00:12, 22.9MB/s]
     50%|####9     | 261M/528M [00:05<00:11, 25.3MB/s]
     50%|#####     | 264M/528M [00:05<00:10, 25.2MB/s]
     50%|#####     | 266M/528M [00:05<00:15, 17.8MB/s]
     51%|#####     | 269M/528M [00:05<00:14, 19.3MB/s]
     51%|#####1    | 272M/528M [00:05<00:12, 21.3MB/s]
     52%|#####1    | 274M/528M [00:05<00:11, 23.1MB/s]
     52%|#####2    | 277M/528M [00:05<00:12, 21.7MB/s]
     53%|#####2    | 279M/528M [00:05<00:12, 20.4MB/s]
     53%|#####3    | 281M/528M [00:06<00:14, 17.8MB/s]
     54%|#####3    | 283M/528M [00:06<00:14, 18.0MB/s]
     54%|#####3    | 285M/528M [00:06<00:13, 18.4MB/s]
     55%|#####4    | 288M/528M [00:06<00:11, 22.5MB/s]
     55%|#####5    | 291M/528M [00:06<00:10, 24.8MB/s]
     56%|#####5    | 294M/528M [00:06<00:09, 26.5MB/s]
     56%|#####6    | 296M/528M [00:06<00:09, 26.1MB/s]
     57%|#####6    | 299M/528M [00:07<00:19, 12.3MB/s]
     57%|#####7    | 301M/528M [00:07<00:16, 14.1MB/s]
     57%|#####7    | 303M/528M [00:07<00:15, 15.4MB/s]
     58%|#####7    | 305M/528M [00:07<00:14, 15.7MB/s]
     58%|#####8    | 307M/528M [00:07<00:14, 16.0MB/s]
     59%|#####8    | 309M/528M [00:07<00:14, 15.9MB/s]
     59%|#####8    | 311M/528M [00:07<00:15, 15.0MB/s]
     59%|#####9    | 313M/528M [00:08<00:14, 15.9MB/s]
     60%|#####9    | 314M/528M [00:08<00:13, 16.7MB/s]
     60%|#####9    | 316M/528M [00:08<00:14, 15.2MB/s]
     60%|######    | 318M/528M [00:08<00:13, 16.5MB/s]
     61%|######    | 321M/528M [00:08<00:11, 18.9MB/s]
     61%|######1   | 323M/528M [00:08<00:10, 21.4MB/s]
     62%|######1   | 325M/528M [00:08<00:10, 19.4MB/s]
     62%|######2   | 327M/528M [00:08<00:14, 14.4MB/s]
     62%|######2   | 330M/528M [00:09<00:12, 16.8MB/s]
     63%|######2   | 332M/528M [00:09<00:13, 15.2MB/s]
     63%|######3   | 334M/528M [00:09<00:12, 16.2MB/s]
     64%|######3   | 337M/528M [00:09<00:10, 19.7MB/s]
     65%|######4   | 341M/528M [00:09<00:08, 23.7MB/s]
     65%|######5   | 345M/528M [00:09<00:07, 26.4MB/s]
     66%|######6   | 349M/528M [00:09<00:05, 32.0MB/s]
     67%|######6   | 352M/528M [00:09<00:06, 28.3MB/s]
     67%|######7   | 355M/528M [00:10<00:06, 26.7MB/s]
     68%|######7   | 358M/528M [00:10<00:06, 26.8MB/s]
     68%|######8   | 361M/528M [00:10<00:06, 27.5MB/s]
     69%|######9   | 365M/528M [00:10<00:05, 32.8MB/s]
     70%|######9   | 369M/528M [00:10<00:04, 33.5MB/s]
     70%|#######   | 372M/528M [00:10<00:05, 31.2MB/s]
     71%|#######1  | 375M/528M [00:10<00:05, 29.9MB/s]
     72%|#######1  | 378M/528M [00:10<00:05, 30.8MB/s]
     72%|#######2  | 381M/528M [00:10<00:04, 31.4MB/s]
     73%|#######2  | 385M/528M [00:11<00:04, 32.6MB/s]
     74%|#######3  | 389M/528M [00:11<00:04, 35.3MB/s]
     74%|#######4  | 392M/528M [00:11<00:04, 34.5MB/s]
     75%|#######4  | 396M/528M [00:11<00:04, 34.3MB/s]
     76%|#######5  | 399M/528M [00:11<00:03, 35.3MB/s]
     76%|#######6  | 403M/528M [00:11<00:03, 33.4MB/s]
     77%|#######6  | 406M/528M [00:11<00:04, 29.1MB/s]
     78%|#######7  | 410M/528M [00:11<00:03, 32.4MB/s]
     78%|#######8  | 413M/528M [00:12<00:05, 23.9MB/s]
     79%|#######8  | 416M/528M [00:12<00:04, 25.5MB/s]
     79%|#######9  | 419M/528M [00:12<00:06, 18.3MB/s]
     80%|#######9  | 422M/528M [00:12<00:05, 20.9MB/s]
     80%|########  | 425M/528M [00:12<00:05, 21.4MB/s]
     81%|########1 | 428M/528M [00:12<00:04, 23.8MB/s]
     82%|########1 | 432M/528M [00:12<00:03, 25.6MB/s]
     82%|########2 | 435M/528M [00:13<00:03, 26.9MB/s]
     83%|########2 | 438M/528M [00:13<00:04, 23.4MB/s]
     83%|########3 | 440M/528M [00:13<00:04, 22.6MB/s]
     84%|########4 | 445M/528M [00:13<00:02, 29.6MB/s]
     85%|########5 | 450M/528M [00:13<00:02, 34.4MB/s]
     86%|########6 | 454M/528M [00:13<00:02, 36.5MB/s]
     87%|########6 | 458M/528M [00:13<00:02, 32.7MB/s]
     87%|########7 | 461M/528M [00:13<00:02, 28.4MB/s]
     88%|########7 | 464M/528M [00:14<00:02, 27.4MB/s]
     88%|########8 | 467M/528M [00:14<00:02, 25.9MB/s]
     89%|########8 | 469M/528M [00:14<00:02, 25.9MB/s]
     89%|########9 | 472M/528M [00:14<00:02, 25.2MB/s]
     90%|########9 | 475M/528M [00:14<00:02, 26.5MB/s]
     90%|######### | 477M/528M [00:14<00:02, 18.9MB/s]
     92%|#########2| 488M/528M [00:14<00:01, 39.5MB/s]
     93%|#########3| 493M/528M [00:15<00:00, 39.7MB/s]
     94%|#########4| 497M/528M [00:15<00:00, 34.4MB/s]
     95%|#########4| 501M/528M [00:15<00:00, 31.0MB/s]
     96%|#########5| 505M/528M [00:15<00:00, 26.4MB/s]
     96%|#########6| 508M/528M [00:15<00:00, 27.7MB/s]
     97%|#########6| 511M/528M [00:15<00:00, 26.1MB/s]
     97%|#########7| 515M/528M [00:15<00:00, 29.2MB/s]
     98%|#########8| 518M/528M [00:15<00:00, 30.1MB/s]
     99%|#########8| 521M/528M [00:16<00:00, 25.0MB/s]
     99%|#########9| 523M/528M [00:16<00:00, 25.0MB/s]
    100%|#########9| 527M/528M [00:16<00:00, 26.5MB/s]
    100%|##########| 528M/528M [00:16<00:00, 33.7MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify ``weights``, i.e. create untrained model
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Related Tutorials
-----------------
`Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.605 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
